

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed May 23 12:12:26 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.45
    23                           ; Generated 16/11/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _PORTD	set	3971
    57  0000                     _LATD	set	3980
    58  0000                     _TRISD	set	3989
    59  0000                     _LATDbits	set	3980
    60                           
    61                           	psect	smallconst
    62  000800                     __psmallconst:
    63                           	opt stack 0
    64  000800  00                 	db	0
    65  000801                     STR_2:
    66  000801  4D                 	db	77	;'M'
    67  000802  69                 	db	105	;'i'
    68  000803  63                 	db	99	;'c'
    69  000804  72                 	db	114	;'r'
    70  000805  6F                 	db	111	;'o'
    71  000806  63                 	db	99	;'c'
    72  000807  6F                 	db	111	;'o'
    73  000808  6E                 	db	110	;'n'
    74  000809  74                 	db	116	;'t'
    75  00080A  72                 	db	114	;'r'
    76  00080B  6F                 	db	111	;'o'
    77  00080C  6C                 	db	108	;'l'
    78  00080D  61                 	db	97	;'a'
    79  00080E  64                 	db	100	;'d'
    80  00080F  6F                 	db	111	;'o'
    81  000810  72                 	db	114	;'r'
    82  000811  65                 	db	101	;'e'
    83  000812  73                 	db	115	;'s'
    84  000813  00                 	db	0
    85  000814                     STR_1:
    86  000814  48                 	db	72	;'H'
    87  000815  4F                 	db	79	;'O'
    88  000816  4C                 	db	76	;'L'
    89  000817  41                 	db	65	;'A'
    90  000818  20                 	db	32
    91  000819  4D                 	db	77	;'M'
    92  00081A  55                 	db	85	;'U'
    93  00081B  4E                 	db	78	;'N'
    94  00081C  44                 	db	68	;'D'
    95  00081D  4F                 	db	79	;'O'
    96  00081E  21                 	db	33
    97  00081F  00                 	db	0
    98                           
    99                           ; #config settings
   100  000820  00                 	db	0	; dummy byte at the end
   101  0000                     
   102                           	psect	cinit
   103  000A30                     __pcinit:
   104                           	opt stack 0
   105  000A30                     start_initialization:
   106                           	opt stack 0
   107  000A30                     __initialization:
   108                           	opt stack 0
   109  000A30                     end_of_initialization:
   110                           	opt stack 0
   111  000A30                     __end_of__initialization:
   112                           	opt stack 0
   113  000A30  0E00               	movlw	low (__Lsmallconst shr (0+16))
   114  000A32  6EF8               	movwf	tblptru,c
   115  000A34  0E08               	movlw	high __Lsmallconst
   116  000A36  6EF7               	movwf	tblptrh,c
   117  000A38  0100               	movlb	0
   118  000A3A  EF71  F004         	goto	_main	;jump to C main() function
   119                           tblptru	equ	0xFF8
   120                           tblptrh	equ	0xFF7
   121                           
   122                           	psect	cstackCOMRAM
   123  000001                     __pcstackCOMRAM:
   124                           	opt stack 0
   125  000001                     ENVIA_NIBBLE@dato:
   126                           	opt stack 0
   127  000001                     LEER_LCD@aux:
   128                           	opt stack 0
   129                           
   130                           ; 1 bytes @ 0x0
   131  000001                     	ds	1
   132  000002                     ENVIA_CHAR@dato:
   133                           	opt stack 0
   134  000002                     ENVIA_LCD_CMD@dato:
   135                           	opt stack 0
   136                           
   137                           ; 1 bytes @ 0x1
   138  000002                     	ds	1
   139  000003                     ENVIA_CHAR@aux:
   140                           	opt stack 0
   141  000003                     ENVIA_LCD_CMD@aux:
   142                           	opt stack 0
   143                           
   144                           ; 1 bytes @ 0x2
   145  000003                     	ds	1
   146  000004                     ??_LCD_CONFIG:
   147  000004                     POS_CURSOR@columna:
   148                           	opt stack 0
   149  000004                     CURSOR_ONOFF@estado:
   150                           	opt stack 0
   151  000004                     ESCRIBE_MENSAJE@cadena:
   152                           	opt stack 0
   153                           
   154                           ; 2 bytes @ 0x3
   155  000004                     	ds	1
   156  000005                     POS_CURSOR@fila:
   157                           	opt stack 0
   158                           
   159                           ; 1 bytes @ 0x4
   160  000005                     	ds	1
   161  000006                     ESCRIBE_MENSAJE@tam:
   162                           	opt stack 0
   163                           
   164                           ; 1 bytes @ 0x5
   165  000006                     	ds	1
   166  000007                     ??_ESCRIBE_MENSAJE:
   167                           
   168                           ; 1 bytes @ 0x6
   169  000007                     	ds	2
   170  000009                     ESCRIBE_MENSAJE@i:
   171                           	opt stack 0
   172                           
   173                           ; 1 bytes @ 0x8
   174  000009                     	ds	1
   175  00000A                     ??_main:
   176                           
   177                           ; 1 bytes @ 0x9
   178  00000A                     	ds	1
   179                           tblptru	equ	0xFF8
   180                           tblptrh	equ	0xFF7
   181                           
   182 ;;
   183 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   184 ;;
   185 ;; *************** function _main *****************
   186 ;; Defined at:
   187 ;;		line 16 in file "newmain.c"
   188 ;; Parameters:    Size  Location     Type
   189 ;;		None
   190 ;; Auto vars:     Size  Location     Type
   191 ;;		None
   192 ;; Return value:  Size  Location     Type
   193 ;;                  1    wreg      void 
   194 ;; Registers used:
   195 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   196 ;; Tracked objects:
   197 ;;		On entry : 0/0
   198 ;;		On exit  : 0/0
   199 ;;		Unchanged: 0/0
   200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   201 ;;      Params:         0       0       0       0       0       0       0       0       0
   202 ;;      Locals:         0       0       0       0       0       0       0       0       0
   203 ;;      Temps:          1       0       0       0       0       0       0       0       0
   204 ;;      Totals:         1       0       0       0       0       0       0       0       0
   205 ;;Total ram usage:        1 bytes
   206 ;; Hardware stack levels required when called:    3
   207 ;; This function calls:
   208 ;;		_BORRAR_LCD
   209 ;;		_CURSOR_HOME
   210 ;;		_CURSOR_ONOFF
   211 ;;		_ESCRIBE_MENSAJE
   212 ;;		_LCD_CONFIG
   213 ;;		_POS_CURSOR
   214 ;; This function is called by:
   215 ;;		Startup code after reset
   216 ;; This function uses a non-reentrant model
   217 ;;
   218                           
   219                           	psect	text0
   220  0008E2                     __ptext0:
   221                           	opt stack 0
   222  0008E2                     _main:
   223                           	opt stack 28
   224                           
   225                           ;newmain.c: 17: TRISD = 0x00;
   226                           
   227                           ;incstack = 0
   228  0008E2  0E00               	movlw	0
   229  0008E4  6E95               	movwf	3989,c	;volatile
   230                           
   231                           ;newmain.c: 18: LCD_CONFIG();
   232  0008E6  EC11  F004         	call	_LCD_CONFIG	;wreg free
   233                           
   234                           ;newmain.c: 19: _delay((unsigned long)((10)*(4000000UL/4000.0)));
   235  0008EA  0E0D               	movlw	13
   236  0008EC  6E0A               	movwf	??_main& (0+255),c
   237  0008EE  0EFC               	movlw	252
   238  0008F0                     u167:
   239  0008F0  2EE8               	decfsz	wreg,f,c
   240  0008F2  D7FE               	bra	u167
   241  0008F4  2E0A               	decfsz	??_main& (0+255),f,c
   242  0008F6  D7FC               	bra	u167
   243                           
   244                           ;newmain.c: 20: BORRAR_LCD();
   245  0008F8  EC23  F005         	call	_BORRAR_LCD	;wreg free
   246                           
   247                           ;newmain.c: 21: CURSOR_ONOFF(1);
   248  0008FC  0E01               	movlw	1
   249  0008FE  ECFC  F004         	call	_CURSOR_ONOFF
   250  000902                     
   251                           ;newmain.c: 23: CURSOR_HOME();
   252  000902  EC1F  F005         	call	_CURSOR_HOME	;wreg free
   253                           
   254                           ;newmain.c: 24: ESCRIBE_MENSAJE("HOLA MUNDO!",11);
   255  000906  0E14               	movlw	low STR_1
   256  000908  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   257  00090A  0E08               	movlw	high STR_1
   258  00090C  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   259  00090E  0E0B               	movlw	11
   260  000910  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   261  000912  EC99  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   262                           
   263                           ;newmain.c: 25: POS_CURSOR(2,0);
   264  000916  0E00               	movlw	0
   265  000918  6E04               	movwf	POS_CURSOR@columna,c
   266  00091A  0E02               	movlw	2
   267  00091C  ECEA  F004         	call	_POS_CURSOR
   268                           
   269                           ;newmain.c: 26: ESCRIBE_MENSAJE("Microcontroladores",18);
   270  000920  0E01               	movlw	low STR_2
   271  000922  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   272  000924  0E08               	movlw	high STR_2
   273  000926  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   274  000928  0E12               	movlw	18
   275  00092A  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   276  00092C  EC99  F004         	call	_ESCRIBE_MENSAJE	;wreg free
   277  000930  D7E8               	goto	l95
   278  000932                     __end_of_main:
   279                           	opt stack 0
   280                           tblptru	equ	0xFF8
   281                           tblptrh	equ	0xFF7
   282                           wreg	equ	0xFE8
   283                           
   284 ;; *************** function _POS_CURSOR *****************
   285 ;; Defined at:
   286 ;;		line 6 in file "LCD.c"
   287 ;; Parameters:    Size  Location     Type
   288 ;;  fila            1    wreg     unsigned char 
   289 ;;  columna         1    3[COMRAM] unsigned char 
   290 ;; Auto vars:     Size  Location     Type
   291 ;;  fila            1    4[COMRAM] unsigned char 
   292 ;; Return value:  Size  Location     Type
   293 ;;                  1    wreg      void 
   294 ;; Registers used:
   295 ;;		wreg, status,2, status,0, cstack
   296 ;; Tracked objects:
   297 ;;		On entry : 0/0
   298 ;;		On exit  : 0/0
   299 ;;		Unchanged: 0/0
   300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   301 ;;      Params:         1       0       0       0       0       0       0       0       0
   302 ;;      Locals:         1       0       0       0       0       0       0       0       0
   303 ;;      Temps:          0       0       0       0       0       0       0       0       0
   304 ;;      Totals:         2       0       0       0       0       0       0       0       0
   305 ;;Total ram usage:        2 bytes
   306 ;; Hardware stack levels used:    1
   307 ;; Hardware stack levels required when called:    2
   308 ;; This function calls:
   309 ;;		_ENVIA_LCD_CMD
   310 ;; This function is called by:
   311 ;;		_main
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315                           	psect	text1
   316  0009D4                     __ptext1:
   317                           	opt stack 0
   318  0009D4                     _POS_CURSOR:
   319                           	opt stack 28
   320                           
   321                           ;incstack = 0
   322                           ;POS_CURSOR@fila stored from wreg
   323  0009D4  6E05               	movwf	POS_CURSOR@fila,c
   324                           
   325                           ;LCD.c: 8: if(fila == 1)
   326  0009D6  0405               	decf	POS_CURSOR@fila,w,c
   327  0009D8  A4D8               	btfss	status,2,c
   328  0009DA  D005               	goto	l21
   329                           
   330                           ;LCD.c: 9: {
   331                           ;LCD.c: 10: ENVIA_LCD_CMD(0x80+columna);
   332  0009DC  5004               	movf	POS_CURSOR@columna,w,c
   333  0009DE  0F80               	addlw	128
   334  0009E0  ECD0  F004         	call	_ENVIA_LCD_CMD
   335                           
   336                           ;LCD.c: 11: }
   337  0009E4  0012               	return	
   338  0009E6                     l21:
   339                           
   340                           ;LCD.c: 12: else if(fila == 2)
   341  0009E6  0E02               	movlw	2
   342  0009E8  1805               	xorwf	POS_CURSOR@fila,w,c
   343  0009EA  A4D8               	btfss	status,2,c
   344  0009EC  0012               	return	
   345                           
   346                           ;LCD.c: 13: {
   347                           ;LCD.c: 14: ENVIA_LCD_CMD(0xC0+columna);
   348  0009EE  5004               	movf	POS_CURSOR@columna,w,c
   349  0009F0  0FC0               	addlw	192
   350  0009F2  ECD0  F004         	call	_ENVIA_LCD_CMD
   351  0009F6  0012               	return	
   352  0009F8                     __end_of_POS_CURSOR:
   353                           	opt stack 0
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           wreg	equ	0xFE8
   357                           status	equ	0xFD8
   358                           
   359 ;; *************** function _LCD_CONFIG *****************
   360 ;; Defined at:
   361 ;;		line 72 in file "LCD.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;		None
   364 ;; Auto vars:     Size  Location     Type
   365 ;;		None
   366 ;; Return value:  Size  Location     Type
   367 ;;                  1    wreg      void 
   368 ;; Registers used:
   369 ;;		wreg, status,2, status,0, cstack
   370 ;; Tracked objects:
   371 ;;		On entry : 0/0
   372 ;;		On exit  : 0/0
   373 ;;		Unchanged: 0/0
   374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   375 ;;      Params:         0       0       0       0       0       0       0       0       0
   376 ;;      Locals:         0       0       0       0       0       0       0       0       0
   377 ;;      Temps:          1       0       0       0       0       0       0       0       0
   378 ;;      Totals:         1       0       0       0       0       0       0       0       0
   379 ;;Total ram usage:        1 bytes
   380 ;; Hardware stack levels used:    1
   381 ;; Hardware stack levels required when called:    2
   382 ;; This function calls:
   383 ;;		_ENVIA_LCD_CMD
   384 ;;		_ENVIA_NIBBLE
   385 ;; This function is called by:
   386 ;;		_main
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390                           	psect	text2
   391  000822                     __ptext2:
   392                           	opt stack 0
   393  000822                     _LCD_CONFIG:
   394                           	opt stack 28
   395                           
   396                           ;LCD.c: 74: LATDbits.LATD0 = 0;
   397                           
   398                           ;incstack = 0
   399  000822  908C               	bcf	3980,0,c	;volatile
   400                           
   401                           ;LCD.c: 75: LATDbits.LATD1 = 0;
   402  000824  928C               	bcf	3980,1,c	;volatile
   403                           
   404                           ;LCD.c: 76: ENVIA_NIBBLE(0x30);
   405  000826  0E30               	movlw	48
   406  000828  EC0A  F005         	call	_ENVIA_NIBBLE
   407                           
   408                           ;LCD.c: 77: _delay(24000);
   409  00082C  0E20               	movlw	32
   410  00082E  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   411  000830  0E2A               	movlw	42
   412  000832                     u177:
   413  000832  2EE8               	decfsz	wreg,f,c
   414  000834  D7FE               	bra	u177
   415  000836  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   416  000838  D7FC               	bra	u177
   417                           
   418                           ;LCD.c: 78: _delay(24000);
   419  00083A  0E20               	movlw	32
   420  00083C  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   421  00083E  0E2A               	movlw	42
   422  000840                     u187:
   423  000840  2EE8               	decfsz	wreg,f,c
   424  000842  D7FE               	bra	u187
   425  000844  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   426  000846  D7FC               	bra	u187
   427                           
   428                           ;LCD.c: 81: ENVIA_NIBBLE(0x30);
   429  000848  0E30               	movlw	48
   430  00084A  EC0A  F005         	call	_ENVIA_NIBBLE
   431                           
   432                           ;LCD.c: 83: _delay(1200);
   433  00084E  0EF0               	movlw	240
   434  000850                     u197:
   435  000850  D000               	nop2	
   436  000852  2EE8               	decfsz	wreg,f,c
   437  000854  D7FD               	bra	u197
   438                           
   439                           ;LCD.c: 84: ENVIA_NIBBLE(0x30);
   440  000856  0E30               	movlw	48
   441  000858  EC0A  F005         	call	_ENVIA_NIBBLE
   442                           
   443                           ;LCD.c: 85: ENVIA_NIBBLE(0x20);
   444  00085C  0E20               	movlw	32
   445  00085E  EC0A  F005         	call	_ENVIA_NIBBLE
   446                           
   447                           ;LCD.c: 86: ENVIA_LCD_CMD(0x01);
   448  000862  0E01               	movlw	1
   449  000864  ECD0  F004         	call	_ENVIA_LCD_CMD
   450                           
   451                           ;LCD.c: 87: ENVIA_LCD_CMD(0x28);
   452  000868  0E28               	movlw	40
   453  00086A  ECD0  F004         	call	_ENVIA_LCD_CMD
   454                           
   455                           ;LCD.c: 88: ENVIA_LCD_CMD(0x0F);
   456  00086E  0E0F               	movlw	15
   457  000870  ECD0  F004         	call	_ENVIA_LCD_CMD
   458                           
   459                           ;LCD.c: 89: ENVIA_LCD_CMD(0x06);
   460  000874  0E06               	movlw	6
   461  000876  ECD0  F004         	call	_ENVIA_LCD_CMD
   462                           
   463                           ;LCD.c: 90: ENVIA_LCD_CMD(0x01);
   464  00087A  0E01               	movlw	1
   465  00087C  ECD0  F004         	call	_ENVIA_LCD_CMD
   466  000880  0012               	return		;funcret
   467  000882                     __end_of_LCD_CONFIG:
   468                           	opt stack 0
   469                           tblptru	equ	0xFF8
   470                           tblptrh	equ	0xFF7
   471                           wreg	equ	0xFE8
   472                           status	equ	0xFD8
   473                           
   474 ;; *************** function _ESCRIBE_MENSAJE *****************
   475 ;; Defined at:
   476 ;;		line 41 in file "LCD.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   479 ;;		 -> STR_2(19), STR_1(12), 
   480 ;;  tam             1    5[COMRAM] unsigned char 
   481 ;; Auto vars:     Size  Location     Type
   482 ;;  i               1    8[COMRAM] unsigned char 
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   492 ;;      Params:         3       0       0       0       0       0       0       0       0
   493 ;;      Locals:         1       0       0       0       0       0       0       0       0
   494 ;;      Temps:          2       0       0       0       0       0       0       0       0
   495 ;;      Totals:         6       0       0       0       0       0       0       0       0
   496 ;;Total ram usage:        6 bytes
   497 ;; Hardware stack levels used:    1
   498 ;; Hardware stack levels required when called:    2
   499 ;; This function calls:
   500 ;;		_ENVIA_CHAR
   501 ;; This function is called by:
   502 ;;		_main
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           	psect	text3
   507  000932                     __ptext3:
   508                           	opt stack 0
   509  000932                     _ESCRIBE_MENSAJE:
   510                           	opt stack 28
   511                           
   512                           ;LCD.c: 43: unsigned char i = 0;
   513                           
   514                           ;incstack = 0
   515  000932  0E00               	movlw	0
   516  000934  6E09               	movwf	ESCRIBE_MENSAJE@i,c
   517                           
   518                           ;LCD.c: 44: for(i = 0; i<tam; i++)
   519  000936  0E00               	movlw	0
   520  000938  6E09               	movwf	ESCRIBE_MENSAJE@i,c
   521  00093A  D013               	goto	l45
   522  00093C                     
   523                           ;LCD.c: 45: {
   524                           ;LCD.c: 46: ENVIA_CHAR(cadena[i]);
   525  00093C  5009               	movf	ESCRIBE_MENSAJE@i,w,c
   526  00093E  0D01               	mullw	1
   527  000940  C004  F007         	movff	ESCRIBE_MENSAJE@cadena,??_ESCRIBE_MENSAJE
   528  000944  C005  F008         	movff	ESCRIBE_MENSAJE@cadena+1,??_ESCRIBE_MENSAJE+1
   529  000948  50F3               	movf	prodl,w,c
   530  00094A  2607               	addwf	??_ESCRIBE_MENSAJE,f,c
   531  00094C  50F4               	movf	prodh,w,c
   532  00094E  2208               	addwfc	??_ESCRIBE_MENSAJE+1,f,c
   533  000950  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   534  000954  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   535  000958                     	if	0	;tblptru may be non-zero
   536  000958                     	endif
   537  000958                     	if	0	;tblptru may be non-zero
   538  000958                     	endif
   539  000958  0008               	tblrd		*
   540  00095A  50F5               	movf	tablat,w,c
   541  00095C  ECB6  F004         	call	_ENVIA_CHAR
   542  000960  2A09               	incf	ESCRIBE_MENSAJE@i,f,c
   543  000962                     l45:
   544  000962  5006               	movf	ESCRIBE_MENSAJE@tam,w,c
   545  000964  5C09               	subwf	ESCRIBE_MENSAJE@i,w,c
   546  000966  B0D8               	btfsc	status,0,c
   547  000968  0012               	return	
   548  00096A  D7E8               	goto	l46
   549  00096C                     __end_of_ESCRIBE_MENSAJE:
   550                           	opt stack 0
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           prodh	equ	0xFF4
   556                           prodl	equ	0xFF3
   557                           wreg	equ	0xFE8
   558                           status	equ	0xFD8
   559                           
   560 ;; *************** function _ENVIA_CHAR *****************
   561 ;; Defined at:
   562 ;;		line 50 in file "LCD.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;  dato            1    wreg     unsigned char 
   565 ;; Auto vars:     Size  Location     Type
   566 ;;  dato            1    1[COMRAM] unsigned char 
   567 ;;  aux             1    2[COMRAM] unsigned char 
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		wreg, status,2, status,0, cstack
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   577 ;;      Params:         0       0       0       0       0       0       0       0       0
   578 ;;      Locals:         2       0       0       0       0       0       0       0       0
   579 ;;      Temps:          0       0       0       0       0       0       0       0       0
   580 ;;      Totals:         2       0       0       0       0       0       0       0       0
   581 ;;Total ram usage:        2 bytes
   582 ;; Hardware stack levels used:    1
   583 ;; Hardware stack levels required when called:    1
   584 ;; This function calls:
   585 ;;		_ENVIA_NIBBLE
   586 ;;		_LEER_LCD
   587 ;; This function is called by:
   588 ;;		_ESCRIBE_MENSAJE
   589 ;;		_GENERACARACTER
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           	psect	text4
   594  00096C                     __ptext4:
   595                           	opt stack 0
   596  00096C                     _ENVIA_CHAR:
   597                           	opt stack 28
   598                           
   599                           ;incstack = 0
   600                           ;ENVIA_CHAR@dato stored from wreg
   601  00096C  6E02               	movwf	ENVIA_CHAR@dato,c
   602                           
   603                           ;LCD.c: 52: unsigned char aux;
   604                           ;LCD.c: 53: LATDbits.LATD0 = 1;
   605  00096E  808C               	bsf	3980,0,c	;volatile
   606                           
   607                           ;LCD.c: 54: LEER_LCD();
   608  000970  EC41  F004         	call	_LEER_LCD	;wreg free
   609                           
   610                           ;LCD.c: 55: TRISD = 0x00;
   611  000974  0E00               	movlw	0
   612  000976  6E95               	movwf	3989,c	;volatile
   613                           
   614                           ;LCD.c: 56: _delay(1200);
   615  000978  0EF0               	movlw	240
   616  00097A                     u207:
   617  00097A  D000               	nop2	
   618  00097C  2EE8               	decfsz	wreg,f,c
   619  00097E  D7FD               	bra	u207
   620                           
   621                           ;LCD.c: 58: LATDbits.LATD1 = 0;
   622  000980  928C               	bcf	3980,1,c	;volatile
   623                           
   624                           ;LCD.c: 59: LATDbits.LATD2 = 0;
   625  000982  948C               	bcf	3980,2,c	;volatile
   626                           
   627                           ;LCD.c: 60: LATDbits.LATD0 = 1;
   628  000984  808C               	bsf	3980,0,c	;volatile
   629                           
   630                           ;LCD.c: 61: aux = dato & 0xF0;
   631  000986  5002               	movf	ENVIA_CHAR@dato,w,c
   632  000988  0BF0               	andlw	240
   633  00098A  6E03               	movwf	ENVIA_CHAR@aux,c
   634                           
   635                           ;LCD.c: 62: ENVIA_NIBBLE(aux);
   636  00098C  5003               	movf	ENVIA_CHAR@aux,w,c
   637  00098E  EC0A  F005         	call	_ENVIA_NIBBLE
   638                           
   639                           ;LCD.c: 63: aux = dato << 4;
   640  000992  3802               	swapf	ENVIA_CHAR@dato,w,c
   641  000994  0BF0               	andlw	240
   642  000996  6E03               	movwf	ENVIA_CHAR@aux,c
   643                           
   644                           ;LCD.c: 64: ENVIA_NIBBLE(aux);
   645  000998  5003               	movf	ENVIA_CHAR@aux,w,c
   646  00099A  EC0A  F005         	call	_ENVIA_NIBBLE
   647  00099E  0012               	return		;funcret
   648  0009A0                     __end_of_ENVIA_CHAR:
   649                           	opt stack 0
   650                           tblptru	equ	0xFF8
   651                           tblptrh	equ	0xFF7
   652                           tblptrl	equ	0xFF6
   653                           tablat	equ	0xFF5
   654                           prodh	equ	0xFF4
   655                           prodl	equ	0xFF3
   656                           wreg	equ	0xFE8
   657                           status	equ	0xFD8
   658                           
   659 ;; *************** function _CURSOR_ONOFF *****************
   660 ;; Defined at:
   661 ;;		line 35 in file "LCD.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;  estado          1    wreg     unsigned char 
   664 ;; Auto vars:     Size  Location     Type
   665 ;;  estado          1    3[COMRAM] unsigned char 
   666 ;; Return value:  Size  Location     Type
   667 ;;                  1    wreg      void 
   668 ;; Registers used:
   669 ;;		wreg, status,2, status,0, cstack
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   675 ;;      Params:         0       0       0       0       0       0       0       0       0
   676 ;;      Locals:         1       0       0       0       0       0       0       0       0
   677 ;;      Temps:          0       0       0       0       0       0       0       0       0
   678 ;;      Totals:         1       0       0       0       0       0       0       0       0
   679 ;;Total ram usage:        1 bytes
   680 ;; Hardware stack levels used:    1
   681 ;; Hardware stack levels required when called:    2
   682 ;; This function calls:
   683 ;;		_ENVIA_LCD_CMD
   684 ;; This function is called by:
   685 ;;		_main
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           	psect	text5
   690  0009F8                     __ptext5:
   691                           	opt stack 0
   692  0009F8                     _CURSOR_ONOFF:
   693                           	opt stack 28
   694                           
   695                           ;incstack = 0
   696                           ;CURSOR_ONOFF@estado stored from wreg
   697  0009F8  6E04               	movwf	CURSOR_ONOFF@estado,c
   698                           
   699                           ;LCD.c: 37: if(estado == 0) ENVIA_LCD_CMD(0x0E);
   700  0009FA  5004               	movf	CURSOR_ONOFF@estado,w,c
   701  0009FC  A4D8               	btfss	status,2,c
   702  0009FE  D003               	goto	l40
   703  000A00  0E0E               	movlw	14
   704  000A02  ECD0  F004         	call	_ENVIA_LCD_CMD
   705  000A06                     l40:
   706                           
   707                           ;LCD.c: 38: if(estado == 1) ENVIA_LCD_CMD(0x0C);
   708  000A06  0404               	decf	CURSOR_ONOFF@estado,w,c
   709  000A08  A4D8               	btfss	status,2,c
   710  000A0A  0012               	return	
   711  000A0C  0E0C               	movlw	12
   712  000A0E  ECD0  F004         	call	_ENVIA_LCD_CMD
   713  000A12  0012               	return	
   714  000A14                     __end_of_CURSOR_ONOFF:
   715                           	opt stack 0
   716                           tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           tblptrl	equ	0xFF6
   719                           tablat	equ	0xFF5
   720                           prodh	equ	0xFF4
   721                           prodl	equ	0xFF3
   722                           wreg	equ	0xFE8
   723                           status	equ	0xFD8
   724                           
   725 ;; *************** function _CURSOR_HOME *****************
   726 ;; Defined at:
   727 ;;		line 30 in file "LCD.c"
   728 ;; Parameters:    Size  Location     Type
   729 ;;		None
   730 ;; Auto vars:     Size  Location     Type
   731 ;;		None
   732 ;; Return value:  Size  Location     Type
   733 ;;                  1    wreg      void 
   734 ;; Registers used:
   735 ;;		wreg, status,2, status,0, cstack
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   741 ;;      Params:         0       0       0       0       0       0       0       0       0
   742 ;;      Locals:         0       0       0       0       0       0       0       0       0
   743 ;;      Temps:          0       0       0       0       0       0       0       0       0
   744 ;;      Totals:         0       0       0       0       0       0       0       0       0
   745 ;;Total ram usage:        0 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; Hardware stack levels required when called:    2
   748 ;; This function calls:
   749 ;;		_ENVIA_LCD_CMD
   750 ;; This function is called by:
   751 ;;		_main
   752 ;; This function uses a non-reentrant model
   753 ;;
   754                           
   755                           	psect	text6
   756  000A3E                     __ptext6:
   757                           	opt stack 0
   758  000A3E                     _CURSOR_HOME:
   759                           	opt stack 28
   760                           
   761                           ;LCD.c: 32: ENVIA_LCD_CMD(0x02);
   762                           
   763                           ;incstack = 0
   764  000A3E  0E02               	movlw	2
   765  000A40  ECD0  F004         	call	_ENVIA_LCD_CMD
   766  000A44  0012               	return		;funcret
   767  000A46                     __end_of_CURSOR_HOME:
   768                           	opt stack 0
   769                           tblptru	equ	0xFF8
   770                           tblptrh	equ	0xFF7
   771                           tblptrl	equ	0xFF6
   772                           tablat	equ	0xFF5
   773                           prodh	equ	0xFF4
   774                           prodl	equ	0xFF3
   775                           wreg	equ	0xFE8
   776                           status	equ	0xFD8
   777                           
   778 ;; *************** function _BORRAR_LCD *****************
   779 ;; Defined at:
   780 ;;		line 67 in file "LCD.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;		None
   783 ;; Auto vars:     Size  Location     Type
   784 ;;		None
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      void 
   787 ;; Registers used:
   788 ;;		wreg, status,2, status,0, cstack
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   794 ;;      Params:         0       0       0       0       0       0       0       0       0
   795 ;;      Locals:         0       0       0       0       0       0       0       0       0
   796 ;;      Temps:          0       0       0       0       0       0       0       0       0
   797 ;;      Totals:         0       0       0       0       0       0       0       0       0
   798 ;;Total ram usage:        0 bytes
   799 ;; Hardware stack levels used:    1
   800 ;; Hardware stack levels required when called:    2
   801 ;; This function calls:
   802 ;;		_ENVIA_LCD_CMD
   803 ;; This function is called by:
   804 ;;		_main
   805 ;; This function uses a non-reentrant model
   806 ;;
   807                           
   808                           	psect	text7
   809  000A46                     __ptext7:
   810                           	opt stack 0
   811  000A46                     _BORRAR_LCD:
   812                           	opt stack 28
   813                           
   814                           ;LCD.c: 69: ENVIA_LCD_CMD(0x01);
   815                           
   816                           ;incstack = 0
   817  000A46  0E01               	movlw	1
   818  000A48  ECD0  F004         	call	_ENVIA_LCD_CMD
   819  000A4C  0012               	return		;funcret
   820  000A4E                     __end_of_BORRAR_LCD:
   821                           	opt stack 0
   822                           tblptru	equ	0xFF8
   823                           tblptrh	equ	0xFF7
   824                           tblptrl	equ	0xFF6
   825                           tablat	equ	0xFF5
   826                           prodh	equ	0xFF4
   827                           prodl	equ	0xFF3
   828                           wreg	equ	0xFE8
   829                           status	equ	0xFD8
   830                           
   831 ;; *************** function _ENVIA_LCD_CMD *****************
   832 ;; Defined at:
   833 ;;		line 104 in file "LCD.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;  dato            1    wreg     unsigned char 
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  dato            1    1[COMRAM] unsigned char 
   838 ;;  aux             1    2[COMRAM] unsigned char 
   839 ;; Return value:  Size  Location     Type
   840 ;;                  1    wreg      void 
   841 ;; Registers used:
   842 ;;		wreg, status,2, status,0, cstack
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   848 ;;      Params:         0       0       0       0       0       0       0       0       0
   849 ;;      Locals:         2       0       0       0       0       0       0       0       0
   850 ;;      Temps:          0       0       0       0       0       0       0       0       0
   851 ;;      Totals:         2       0       0       0       0       0       0       0       0
   852 ;;Total ram usage:        2 bytes
   853 ;; Hardware stack levels used:    1
   854 ;; Hardware stack levels required when called:    1
   855 ;; This function calls:
   856 ;;		_ENVIA_NIBBLE
   857 ;;		_LEER_LCD
   858 ;; This function is called by:
   859 ;;		_POS_CURSOR
   860 ;;		_CURSOR_HOME
   861 ;;		_CURSOR_ONOFF
   862 ;;		_BORRAR_LCD
   863 ;;		_LCD_CONFIG
   864 ;;		_BLINK_CURSOR
   865 ;;		_DISPLAY_ONOFF
   866 ;;		_GENERACARACTER
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           	psect	text8
   871  0009A0                     __ptext8:
   872                           	opt stack 0
   873  0009A0                     _ENVIA_LCD_CMD:
   874                           	opt stack 28
   875                           
   876                           ;incstack = 0
   877                           ;ENVIA_LCD_CMD@dato stored from wreg
   878  0009A0  6E02               	movwf	ENVIA_LCD_CMD@dato,c
   879                           
   880                           ;LCD.c: 106: unsigned char aux;
   881                           ;LCD.c: 107: LATDbits.LATD0 = 0;
   882  0009A2  908C               	bcf	3980,0,c	;volatile
   883                           
   884                           ;LCD.c: 108: LEER_LCD();
   885  0009A4  EC41  F004         	call	_LEER_LCD	;wreg free
   886                           
   887                           ;LCD.c: 109: TRISD = 0b00000000;
   888  0009A8  0E00               	movlw	0
   889  0009AA  6E95               	movwf	3989,c	;volatile
   890                           
   891                           ;LCD.c: 111: _delay(1200);
   892  0009AC  0EF0               	movlw	240
   893  0009AE                     u217:
   894  0009AE  D000               	nop2	
   895  0009B0  2EE8               	decfsz	wreg,f,c
   896  0009B2  D7FD               	bra	u217
   897                           
   898                           ;LCD.c: 112: LATDbits.LATD1 = 0;
   899  0009B4  928C               	bcf	3980,1,c	;volatile
   900                           
   901                           ;LCD.c: 113: LATDbits.LATD2 = 0;
   902  0009B6  948C               	bcf	3980,2,c	;volatile
   903                           
   904                           ;LCD.c: 114: LATDbits.LATD0 = 0;
   905  0009B8  908C               	bcf	3980,0,c	;volatile
   906                           
   907                           ;LCD.c: 115: aux = dato & 0xF0;
   908  0009BA  5002               	movf	ENVIA_LCD_CMD@dato,w,c
   909  0009BC  0BF0               	andlw	240
   910  0009BE  6E03               	movwf	ENVIA_LCD_CMD@aux,c
   911                           
   912                           ;LCD.c: 116: ENVIA_NIBBLE(aux);
   913  0009C0  5003               	movf	ENVIA_LCD_CMD@aux,w,c
   914  0009C2  EC0A  F005         	call	_ENVIA_NIBBLE
   915                           
   916                           ;LCD.c: 117: aux = dato<<4;
   917  0009C6  3802               	swapf	ENVIA_LCD_CMD@dato,w,c
   918  0009C8  0BF0               	andlw	240
   919  0009CA  6E03               	movwf	ENVIA_LCD_CMD@aux,c
   920                           
   921                           ;LCD.c: 118: ENVIA_NIBBLE(aux);
   922  0009CC  5003               	movf	ENVIA_LCD_CMD@aux,w,c
   923  0009CE  EC0A  F005         	call	_ENVIA_NIBBLE
   924  0009D2  0012               	return		;funcret
   925  0009D4                     __end_of_ENVIA_LCD_CMD:
   926                           	opt stack 0
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           prodh	equ	0xFF4
   932                           prodl	equ	0xFF3
   933                           wreg	equ	0xFE8
   934                           status	equ	0xFD8
   935                           
   936 ;; *************** function _LEER_LCD *****************
   937 ;; Defined at:
   938 ;;		line 121 in file "LCD.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;		None
   941 ;; Auto vars:     Size  Location     Type
   942 ;;  aux             1    0[COMRAM] unsigned char 
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      void 
   945 ;; Registers used:
   946 ;;		wreg, status,2, status,0
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   952 ;;      Params:         0       0       0       0       0       0       0       0       0
   953 ;;      Locals:         1       0       0       0       0       0       0       0       0
   954 ;;      Temps:          0       0       0       0       0       0       0       0       0
   955 ;;      Totals:         1       0       0       0       0       0       0       0       0
   956 ;;Total ram usage:        1 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; This function calls:
   959 ;;		Nothing
   960 ;; This function is called by:
   961 ;;		_ENVIA_CHAR
   962 ;;		_ENVIA_LCD_CMD
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text9
   967  000882                     __ptext9:
   968                           	opt stack 0
   969  000882                     _LEER_LCD:
   970                           	opt stack 28
   971                           
   972                           ;LCD.c: 123: unsigned char aux;
   973                           ;LCD.c: 124: TRISD = 0xF8;
   974                           
   975                           ;incstack = 0
   976  000882  0EF8               	movlw	248
   977  000884  6E95               	movwf	3989,c	;volatile
   978                           
   979                           ;LCD.c: 125: LATDbits.LATD0 = 0;
   980  000886  908C               	bcf	3980,0,c	;volatile
   981                           
   982                           ;LCD.c: 126: LATDbits.LATD1 = 1;
   983  000888  828C               	bsf	3980,1,c	;volatile
   984                           
   985                           ;LCD.c: 127: LATDbits.LATD2 = 1;
   986  00088A  848C               	bsf	3980,2,c	;volatile
   987                           
   988                           ;LCD.c: 128: _delay(1200);
   989  00088C  0EF0               	movlw	240
   990  00088E                     u227:
   991  00088E  D000               	nop2	
   992  000890  2EE8               	decfsz	wreg,f,c
   993  000892  D7FD               	bra	u227
   994                           
   995                           ;LCD.c: 130: aux = PORTD;
   996  000894  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
   997                           
   998                           ;LCD.c: 131: LATDbits.LATD2 = 0;
   999  000898  948C               	bcf	3980,2,c	;volatile
  1000                           
  1001                           ;LCD.c: 132: _delay(1200);
  1002  00089A  0EF0               	movlw	240
  1003  00089C                     u237:
  1004  00089C  D000               	nop2	
  1005  00089E  2EE8               	decfsz	wreg,f,c
  1006  0008A0  D7FD               	bra	u237
  1007                           
  1008                           ;LCD.c: 134: LATDbits.LATD2 = 1;
  1009  0008A2  848C               	bsf	3980,2,c	;volatile
  1010                           
  1011                           ;LCD.c: 135: _delay(1200);
  1012  0008A4  0EF0               	movlw	240
  1013  0008A6                     u247:
  1014  0008A6  D000               	nop2	
  1015  0008A8  2EE8               	decfsz	wreg,f,c
  1016  0008AA  D7FD               	bra	u247
  1017  0008AC  D011               	goto	l752
  1018  0008AE                     l67:
  1019                           
  1020                           ;LCD.c: 140: {
  1021                           ;LCD.c: 141: LATDbits.LATD2 = 1;
  1022  0008AE  848C               	bsf	3980,2,c	;volatile
  1023                           
  1024                           ;LCD.c: 142: _delay(1200);
  1025  0008B0  0EF0               	movlw	240
  1026  0008B2                     u257:
  1027  0008B2  D000               	nop2	
  1028  0008B4  2EE8               	decfsz	wreg,f,c
  1029  0008B6  D7FD               	bra	u257
  1030                           
  1031                           ;LCD.c: 143: aux = PORTD;
  1032  0008B8  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1033                           
  1034                           ;LCD.c: 144: LATDbits.LATD2 = 0;
  1035  0008BC  948C               	bcf	3980,2,c	;volatile
  1036                           
  1037                           ;LCD.c: 145: _delay(1200);
  1038  0008BE  0EF0               	movlw	240
  1039  0008C0                     u267:
  1040  0008C0  D000               	nop2	
  1041  0008C2  2EE8               	decfsz	wreg,f,c
  1042  0008C4  D7FD               	bra	u267
  1043                           
  1044                           ;LCD.c: 146: LATDbits.LATD2 = 1;
  1045  0008C6  848C               	bsf	3980,2,c	;volatile
  1046                           
  1047                           ;LCD.c: 147: _delay(1200);
  1048  0008C8  0EF0               	movlw	240
  1049  0008CA                     u277:
  1050  0008CA  D000               	nop2	
  1051  0008CC  2EE8               	decfsz	wreg,f,c
  1052  0008CE  D7FD               	bra	u277
  1053  0008D0                     l752:
  1054                           
  1055                           ;LCD.c: 148: LATDbits.LATD2 = 0;
  1056  0008D0  948C               	bcf	3980,2,c	;volatile
  1057                           
  1058                           ;LCD.c: 149: aux = aux & 0x80;
  1059  0008D2  5001               	movf	LEER_LCD@aux,w,c
  1060  0008D4  0B80               	andlw	128
  1061  0008D6  6E01               	movwf	LEER_LCD@aux,c
  1062  0008D8  0E80               	movlw	128
  1063  0008DA  1801               	xorwf	LEER_LCD@aux,w,c
  1064  0008DC  A4D8               	btfss	status,2,c
  1065  0008DE  0012               	return	
  1066  0008E0  D7E6               	goto	l67
  1067  0008E2                     __end_of_LEER_LCD:
  1068                           	opt stack 0
  1069                           tblptru	equ	0xFF8
  1070                           tblptrh	equ	0xFF7
  1071                           tblptrl	equ	0xFF6
  1072                           tablat	equ	0xFF5
  1073                           prodh	equ	0xFF4
  1074                           prodl	equ	0xFF3
  1075                           wreg	equ	0xFE8
  1076                           status	equ	0xFD8
  1077                           
  1078 ;; *************** function _ENVIA_NIBBLE *****************
  1079 ;; Defined at:
  1080 ;;		line 93 in file "LCD.c"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;  dato            1    wreg     unsigned char 
  1083 ;; Auto vars:     Size  Location     Type
  1084 ;;  dato            1    0[COMRAM] unsigned char 
  1085 ;; Return value:  Size  Location     Type
  1086 ;;                  1    wreg      void 
  1087 ;; Registers used:
  1088 ;;		wreg, status,2, status,0
  1089 ;; Tracked objects:
  1090 ;;		On entry : 0/0
  1091 ;;		On exit  : 0/0
  1092 ;;		Unchanged: 0/0
  1093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1094 ;;      Params:         0       0       0       0       0       0       0       0       0
  1095 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1096 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1097 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1098 ;;Total ram usage:        1 bytes
  1099 ;; Hardware stack levels used:    1
  1100 ;; This function calls:
  1101 ;;		Nothing
  1102 ;; This function is called by:
  1103 ;;		_ENVIA_CHAR
  1104 ;;		_LCD_CONFIG
  1105 ;;		_ENVIA_LCD_CMD
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           	psect	text10
  1110  000A14                     __ptext10:
  1111                           	opt stack 0
  1112  000A14                     _ENVIA_NIBBLE:
  1113                           	opt stack 28
  1114                           
  1115                           ;incstack = 0
  1116                           ;ENVIA_NIBBLE@dato stored from wreg
  1117  000A14  6E01               	movwf	ENVIA_NIBBLE@dato,c
  1118                           
  1119                           ;LCD.c: 95: LATD &= 0x0F;
  1120  000A16  0E0F               	movlw	15
  1121  000A18  168C               	andwf	3980,f,c	;volatile
  1122                           
  1123                           ;LCD.c: 96: dato &= 0xF0;
  1124  000A1A  0EF0               	movlw	240
  1125  000A1C  1601               	andwf	ENVIA_NIBBLE@dato,f,c
  1126                           
  1127                           ;LCD.c: 97: LATD|= dato;
  1128  000A1E  5001               	movf	ENVIA_NIBBLE@dato,w,c
  1129  000A20  128C               	iorwf	3980,f,c	;volatile
  1130                           
  1131                           ;LCD.c: 98: LATDbits.LATD2 = 1;
  1132  000A22  848C               	bsf	3980,2,c	;volatile
  1133                           
  1134                           ;LCD.c: 100: _delay(1200);
  1135  000A24  0EF0               	movlw	240
  1136  000A26                     u287:
  1137  000A26  D000               	nop2	
  1138  000A28  2EE8               	decfsz	wreg,f,c
  1139  000A2A  D7FD               	bra	u287
  1140                           
  1141                           ;LCD.c: 101: LATDbits.LATD2 = 0;
  1142  000A2C  948C               	bcf	3980,2,c	;volatile
  1143  000A2E  0012               	return		;funcret
  1144  000A30                     __end_of_ENVIA_NIBBLE:
  1145                           	opt stack 0
  1146                           tblptru	equ	0xFF8
  1147                           tblptrh	equ	0xFF7
  1148                           tblptrl	equ	0xFF6
  1149                           tablat	equ	0xFF5
  1150                           prodh	equ	0xFF4
  1151                           prodl	equ	0xFF3
  1152                           wreg	equ	0xFE8
  1153                           status	equ	0xFD8
  1154                           tblptru	equ	0xFF8
  1155                           tblptrh	equ	0xFF7
  1156                           tblptrl	equ	0xFF6
  1157                           tablat	equ	0xFF5
  1158                           prodh	equ	0xFF4
  1159                           prodl	equ	0xFF3
  1160                           wreg	equ	0xFE8
  1161                           status	equ	0xFD8
  1162                           
  1163                           	psect	rparam
  1164  0000                     tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           prodh	equ	0xFF4
  1169                           prodl	equ	0xFF3
  1170                           wreg	equ	0xFE8
  1171                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     10      10
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[19]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1324
                                              9 COMRAM     1     1      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      A       A       1       10.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed May 23 12:12:26 2018

                      l21 09E6                        l40 0A06                        l45 0962  
                      l46 093C                        l67 08AE                        l95 0902  
           ENVIA_CHAR@aux 0003                       l752 08D0                       u207 097A  
                     u217 09AE                       u227 088E                       u237 089C  
                     u247 08A6                       u167 08F0                       u257 08B2  
                     u177 0832                       u267 08C0                       u187 0840  
                     u277 08CA                       u197 0850                       u287 0A26  
            __CFG_BOR$OFF 000000               LEER_LCD@aux 0001                       wreg 000FE8  
            ?_CURSOR_HOME 0001            ??_ENVIA_NIBBLE 0001              __CFG_LVP$OFF 000000  
          ENVIA_CHAR@dato 0002              __CFG_WDT$OFF 000000                      STR_1 0814  
                    STR_2 0801                      _LATD 000F8C              __CFG_PWRT$ON 000000  
                    _main 08E2                      prodh 000FF4                      prodl 000FF3  
                    start 0000             ?_CURSOR_ONOFF 0001             __CFG_MCLRE$ON 000000  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0002          __end_of_LEER_LCD 08E2  
     __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000  
                   ?_main 0001                     _PORTD 000F83       __size_of_LCD_CONFIG 0060  
                   _TRISD 000F95       __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004  
                   tablat 000FF5                     status 000FD8            ??_CURSOR_ONOFF 0004  
         __initialization 0A30              __end_of_main 0932           _ESCRIBE_MENSAJE 0932  
                  ??_main 000A             __activetblptr 000001      __end_of_ENVIA_NIBBLE 0A30  
     __size_of_POS_CURSOR 0024              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8              ??_BORRAR_LCD 0004  
    __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0001                __accesstop 0060  
 __end_of__initialization 0A30           __CFG_PBADEN$OFF 000000           __CFG_FOSC$XT_XT 000000  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 096C            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0A4E  
        ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0A14        __end_of_LCD_CONFIG 0882  
      __end_of_ENVIA_CHAR 09A0                ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001  
            ??_POS_CURSOR 0005     __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000  
                 __Lparam 0000          ?_ESCRIBE_MENSAJE 0004              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 09D4                   __pcinit 0A30        __end_of_POS_CURSOR 09F8  
                 __ramtop 0800                   __ptext0 08E2                   __ptext1 09D4  
                 __ptext2 0822                   __ptext3 0932                   __ptext4 096C  
                 __ptext5 09F8                   __ptext6 0A3E                   __ptext7 0A46  
                 __ptext8 09A0                   __ptext9 0882              _ENVIA_NIBBLE 0A14  
    end_of_initialization 0A30     __size_of_CURSOR_ONOFF 001C         __size_of_LEER_LCD 0060  
            _CURSOR_ONOFF 09F8        CURSOR_ONOFF@estado 0004             ??_CURSOR_HOME 0004  
     start_initialization 0A30         ENVIA_LCD_CMD@dato 0002       __end_of_CURSOR_HOME 0A46  
             __smallconst 0800                  _LEER_LCD 0882                  _LATDbits 000F8C  
        ESCRIBE_MENSAJE@i 0009            POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003A  
             _CURSOR_HOME 0A3E    __size_of_ENVIA_LCD_CMD 0034                  __Hrparam 0000  
                __Lrparam 0000              __Lsmallconst 0800                  __ptext10 0A14  
              _BORRAR_LCD 0A46             __size_of_main 0050                _LCD_CONFIG 0822  
              _ENVIA_CHAR 096C             _ENVIA_LCD_CMD 09A0     __CFG_CPUDIV$OSC1_PLL2 000000  
       ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004            ?_ENVIA_LCD_CMD 0001  
             ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001                _POS_CURSOR 09D4  
             ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006               ?_ENVIA_CHAR 0001  
       POS_CURSOR@columna 0004  
