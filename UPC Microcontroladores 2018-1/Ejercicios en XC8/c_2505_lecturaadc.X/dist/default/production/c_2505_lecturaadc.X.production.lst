

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 25 20:21:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4550 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     _PORTD	set	3971
    63  0000                     _LATD	set	3980
    64  0000                     _LATDbits	set	3980
    65  0000                     _ADRESL	set	4035
    66  0000                     _ADCON0bits	set	4034
    67  0000                     _ADCON2	set	4032
    68  0000                     _ADCON0	set	4034
    69  0000                     _ADCON1	set	4033
    70  0000                     _TRISB	set	3987
    71  0000                     _TRISE	set	3990
    72  0000                     _TRISA	set	3986
    73  0000                     _TRISD	set	3989
    74  0000                     _ADCON2bits	set	4032
    75  0000                     _ADRESH	set	4036
    76                           
    77                           	psect	smallconst
    78  000800                     __psmallconst:
    79                           	opt stack 0
    80  000800  00                 	db	0
    81  000801                     STR_1:
    82  000801  4C                 	db	76	;'L'
    83  000802  65                 	db	101	;'e'
    84  000803  63                 	db	99	;'c'
    85  000804  74                 	db	116	;'t'
    86  000805  75                 	db	117	;'u'
    87  000806  72                 	db	114	;'r'
    88  000807  61                 	db	97	;'a'
    89  000808  20                 	db	32
    90  000809  64                 	db	100	;'d'
    91  00080A  65                 	db	101	;'e'
    92  00080B  6C                 	db	108	;'l'
    93  00080C  20                 	db	32
    94  00080D  50                 	db	80	;'P'
    95  00080E  6F                 	db	111	;'o'
    96  00080F  74                 	db	116	;'t'
    97  000810  00                 	db	0
    98  000811                     STR_2:
    99  000811  56                 	db	86	;'V'
   100  000812  61                 	db	97	;'a'
   101  000813  6C                 	db	108	;'l'
   102  000814  6F                 	db	111	;'o'
   103  000815  72                 	db	114	;'r'
   104  000816  3A                 	db	58	;':'
   105  000817  00                 	db	0
   106                           
   107                           ; #config settings
   108  000818  00                 	db	0	; dummy byte at the end
   109  0000                     
   110                           	psect	cinit
   111  000BFC                     __pcinit:
   112                           	opt stack 0
   113  000BFC                     start_initialization:
   114                           	opt stack 0
   115  000BFC                     __initialization:
   116                           	opt stack 0
   117                           
   118                           ; Clear objects allocated to COMRAM (6 bytes)
   119  000BFC  6A0F               	clrf	(__pbssCOMRAM+5)& (0+255),c
   120  000BFE  6A0E               	clrf	(__pbssCOMRAM+4)& (0+255),c
   121  000C00  6A0D               	clrf	(__pbssCOMRAM+3)& (0+255),c
   122  000C02  6A0C               	clrf	(__pbssCOMRAM+2)& (0+255),c
   123  000C04  6A0B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   124  000C06  6A0A               	clrf	__pbssCOMRAM& (0+255),c
   125  000C08                     end_of_initialization:
   126                           	opt stack 0
   127  000C08                     __end_of__initialization:
   128                           	opt stack 0
   129  000C08  0E00               	movlw	low (__Lmediumconst shr (0+16))
   130  000C0A  6EF8               	movwf	tblptru,c
   131  000C0C  0100               	movlb	0
   132  000C0E  EFA1  F004         	goto	_main	;jump to C main() function
   133                           tblptru	equ	0xFF8
   134                           
   135                           	psect	bssCOMRAM
   136  00000A                     __pbssCOMRAM:
   137                           	opt stack 0
   138  00000A                     _resultado:
   139                           	opt stack 0
   140  00000A                     	ds	2
   141  00000C                     _temporal:
   142                           	opt stack 0
   143  00000C                     	ds	1
   144  00000D                     _diguni:
   145                           	opt stack 0
   146  00000D                     	ds	1
   147  00000E                     _digdec:
   148                           	opt stack 0
   149  00000E                     	ds	1
   150  00000F                     _digcen:
   151                           	opt stack 0
   152  00000F                     	ds	1
   153                           tblptru	equ	0xFF8
   154                           
   155                           	psect	cstackCOMRAM
   156  000001                     __pcstackCOMRAM:
   157                           	opt stack 0
   158  000001                     ?_ADC_CONVERTIR:
   159                           	opt stack 0
   160  000001                     ?___awdiv:
   161                           	opt stack 0
   162  000001                     ADC_CONFIG@canal:
   163                           	opt stack 0
   164  000001                     ENVIA_NIBBLE@dato:
   165                           	opt stack 0
   166  000001                     LEER_LCD@aux:
   167                           	opt stack 0
   168  000001                     ___awdiv@dividend:
   169                           	opt stack 0
   170                           
   171                           ; 2 bytes @ 0x0
   172  000001                     	ds	1
   173  000002                     ENVIA_CHAR@dato:
   174                           	opt stack 0
   175  000002                     ENVIA_LCD_CMD@dato:
   176                           	opt stack 0
   177                           
   178                           ; 1 bytes @ 0x1
   179  000002                     	ds	1
   180  000003                     ??_ADC_CONVERTIR:
   181  000003                     ENVIA_CHAR@aux:
   182                           	opt stack 0
   183  000003                     ENVIA_LCD_CMD@aux:
   184                           	opt stack 0
   185  000003                     ___awdiv@divisor:
   186                           	opt stack 0
   187                           
   188                           ; 2 bytes @ 0x2
   189  000003                     	ds	1
   190  000004                     ??_LCD_CONFIG:
   191  000004                     POS_CURSOR@columna:
   192                           	opt stack 0
   193  000004                     CURSOR_ONOFF@estado:
   194                           	opt stack 0
   195  000004                     ADC_CONVERTIR@num:
   196                           	opt stack 0
   197  000004                     ESCRIBE_MENSAJE@cadena:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x3
   201  000004                     	ds	1
   202  000005                     ??_arranca_LCD:
   203  000005                     POS_CURSOR@fila:
   204                           	opt stack 0
   205  000005                     ___awdiv@counter:
   206                           	opt stack 0
   207                           
   208                           ; 1 bytes @ 0x4
   209  000005                     	ds	1
   210  000006                     ESCRIBE_MENSAJE@tam:
   211                           	opt stack 0
   212  000006                     ___awdiv@sign:
   213                           	opt stack 0
   214                           
   215                           ; 1 bytes @ 0x5
   216  000006                     	ds	1
   217  000007                     ??_ESCRIBE_MENSAJE:
   218  000007                     ___awdiv@quotient:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x6
   222  000007                     	ds	2
   223  000009                     ESCRIBE_MENSAJE@i:
   224                           	opt stack 0
   225                           
   226                           ; 1 bytes @ 0x8
   227  000009                     	ds	1
   228  00000A                     tblptru	equ	0xFF8
   229                           
   230                           ; 1 bytes @ 0x9
   231 ;;
   232 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   233 ;;
   234 ;; *************** function _main *****************
   235 ;; Defined at:
   236 ;;		line 26 in file "newmain.c"
   237 ;; Parameters:    Size  Location     Type
   238 ;;		None
   239 ;; Auto vars:     Size  Location     Type
   240 ;;		None
   241 ;; Return value:  Size  Location     Type
   242 ;;                  1    wreg      void 
   243 ;; Registers used:
   244 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   245 ;; Tracked objects:
   246 ;;		On entry : 0/0
   247 ;;		On exit  : 0/0
   248 ;;		Unchanged: 0/0
   249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   250 ;;      Params:         0       0       0       0       0       0       0       0       0
   251 ;;      Locals:         0       0       0       0       0       0       0       0       0
   252 ;;      Temps:          0       0       0       0       0       0       0       0       0
   253 ;;      Totals:         0       0       0       0       0       0       0       0       0
   254 ;;Total ram usage:        0 bytes
   255 ;; Hardware stack levels required when called:    4
   256 ;; This function calls:
   257 ;;		_ADC_CONFIG
   258 ;;		_ADC_CONVERTIR
   259 ;;		_CURSOR_HOME
   260 ;;		_ENVIA_CHAR
   261 ;;		_ESCRIBE_MENSAJE
   262 ;;		_POS_CURSOR
   263 ;;		_arranca_LCD
   264 ;;		_conviertemon
   265 ;; This function is called by:
   266 ;;		Startup code after reset
   267 ;; This function uses a non-reentrant model
   268 ;;
   269                           
   270                           	psect	text0
   271  000942                     __ptext0:
   272                           	opt stack 0
   273  000942                     _main:
   274                           	opt stack 27
   275                           
   276                           ;newmain.c: 27: arranca_LCD();
   277                           
   278                           ;incstack = 0
   279  000942  ECD1  F005         	call	_arranca_LCD	;wreg free
   280                           
   281                           ;newmain.c: 28: ADC_CONFIG(0);
   282  000946  0E00               	movlw	0
   283  000948  EC0D  F004         	call	_ADC_CONFIG
   284                           
   285                           ;newmain.c: 29: ADCON2bits.ADFM = 0;
   286  00094C  9EC0               	bcf	4032,7,c	;volatile
   287  00094E                     l45:
   288                           
   289                           ;newmain.c: 31: CURSOR_HOME();
   290  00094E  EC0D  F006         	call	_CURSOR_HOME	;wreg free
   291                           
   292                           ;newmain.c: 32: ESCRIBE_MENSAJE("Lectura del Pot", 15);
   293  000952  0E01               	movlw	low STR_1
   294  000954  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   295  000956  0E08               	movlw	high STR_1
   296  000958  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   297  00095A  0E0F               	movlw	15
   298  00095C  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   299  00095E  EC58  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   300                           
   301                           ;newmain.c: 33: resultado = ADC_CONVERTIR();
   302  000962  ECA9  F005         	call	_ADC_CONVERTIR	;wreg free
   303  000966  C001  F00A         	movff	?_ADC_CONVERTIR,_resultado
   304  00096A  C002  F00B         	movff	?_ADC_CONVERTIR+1,_resultado+1
   305                           
   306                           ;newmain.c: 34: temporal = resultado;
   307  00096E  C00A  F00C         	movff	_resultado,_temporal
   308                           
   309                           ;newmain.c: 35: conviertemon();
   310  000972  EC35  F005         	call	_conviertemon	;wreg free
   311                           
   312                           ;newmain.c: 36: POS_CURSOR(2,2);
   313  000976  0E02               	movlw	2
   314  000978  6E04               	movwf	POS_CURSOR@columna,c
   315  00097A  0E02               	movlw	2
   316  00097C  ECBF  F005         	call	_POS_CURSOR
   317                           
   318                           ;newmain.c: 37: ESCRIBE_MENSAJE("Valor:", 6);
   319  000980  0E11               	movlw	low STR_2
   320  000982  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   321  000984  0E08               	movlw	high STR_2
   322  000986  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   323  000988  0E06               	movlw	6
   324  00098A  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   325  00098C  EC58  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   326                           
   327                           ;newmain.c: 38: ENVIA_CHAR(digcen+0x30);
   328  000990  500F               	movf	_digcen,w,c
   329  000992  0F30               	addlw	48
   330  000994  EC75  F005         	call	_ENVIA_CHAR
   331                           
   332                           ;newmain.c: 39: ENVIA_CHAR(digdec+0x30);
   333  000998  500E               	movf	_digdec,w,c
   334  00099A  0F30               	addlw	48
   335  00099C  EC75  F005         	call	_ENVIA_CHAR
   336                           
   337                           ;newmain.c: 40: ENVIA_CHAR(diguni+0x30);
   338  0009A0  500D               	movf	_diguni,w,c
   339  0009A2  0F30               	addlw	48
   340  0009A4  EC75  F005         	call	_ENVIA_CHAR
   341  0009A8  D7D2               	goto	l45
   342  0009AA                     __end_of_main:
   343                           	opt stack 0
   344                           tblptru	equ	0xFF8
   345                           
   346 ;; *************** function _conviertemon *****************
   347 ;; Defined at:
   348 ;;		line 52 in file "newmain.c"
   349 ;; Parameters:    Size  Location     Type
   350 ;;		None
   351 ;; Auto vars:     Size  Location     Type
   352 ;;		None
   353 ;; Return value:  Size  Location     Type
   354 ;;                  2   14[None  ] int 
   355 ;; Registers used:
   356 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   357 ;; Tracked objects:
   358 ;;		On entry : 0/0
   359 ;;		On exit  : 0/0
   360 ;;		Unchanged: 0/0
   361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   362 ;;      Params:         0       0       0       0       0       0       0       0       0
   363 ;;      Locals:         0       0       0       0       0       0       0       0       0
   364 ;;      Temps:          0       0       0       0       0       0       0       0       0
   365 ;;      Totals:         0       0       0       0       0       0       0       0       0
   366 ;;Total ram usage:        0 bytes
   367 ;; Hardware stack levels used:    1
   368 ;; Hardware stack levels required when called:    1
   369 ;; This function calls:
   370 ;;		___awdiv
   371 ;; This function is called by:
   372 ;;		_main
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           	psect	text1
   377  000A6A                     __ptext1:
   378                           	opt stack 0
   379  000A6A                     _conviertemon:
   380                           	opt stack 29
   381                           
   382                           ;newmain.c: 53: digcen = ADRESH / 100;
   383                           
   384                           ;incstack = 0
   385  000A6A  CFC4 F001          	movff	4036,___awdiv@dividend	;volatile
   386  000A6E  6A02               	clrf	___awdiv@dividend+1,c
   387  000A70  0E00               	movlw	0
   388  000A72  6E04               	movwf	___awdiv@divisor+1,c
   389  000A74  0E64               	movlw	100
   390  000A76  6E03               	movwf	___awdiv@divisor,c
   391  000A78  EC5F  F004         	call	___awdiv	;wreg free
   392  000A7C  5001               	movf	?___awdiv,w,c
   393  000A7E  6E0F               	movwf	_digcen,c
   394                           
   395                           ;newmain.c: 54: temporal = ADRESH - (digcen * 100);
   396  000A80  500F               	movf	_digcen,w,c
   397  000A82  0D64               	mullw	100
   398  000A84  50F3               	movf	prodl,w,c
   399  000A86  0800               	sublw	0
   400  000A88  24C4               	addwf	4036,w,c	;volatile
   401  000A8A  6E0C               	movwf	_temporal,c
   402                           
   403                           ;newmain.c: 55: digdec = temporal / 10;
   404  000A8C  C00C  F001         	movff	_temporal,___awdiv@dividend
   405  000A90  6A02               	clrf	___awdiv@dividend+1,c
   406  000A92  0E00               	movlw	0
   407  000A94  6E04               	movwf	___awdiv@divisor+1,c
   408  000A96  0E0A               	movlw	10
   409  000A98  6E03               	movwf	___awdiv@divisor,c
   410  000A9A  EC5F  F004         	call	___awdiv	;wreg free
   411  000A9E  5001               	movf	?___awdiv,w,c
   412  000AA0  6E0E               	movwf	_digdec,c
   413                           
   414                           ;newmain.c: 56: diguni = temporal - (digdec * 10);
   415  000AA2  500E               	movf	_digdec,w,c
   416  000AA4  0D0A               	mullw	10
   417  000AA6  50F3               	movf	prodl,w,c
   418  000AA8  0800               	sublw	0
   419  000AAA  240C               	addwf	_temporal,w,c
   420  000AAC  6E0D               	movwf	_diguni,c
   421  000AAE  0012               	return		;funcret
   422  000AB0                     __end_of_conviertemon:
   423                           	opt stack 0
   424                           tblptru	equ	0xFF8
   425                           prodl	equ	0xFF3
   426                           
   427 ;; *************** function ___awdiv *****************
   428 ;; Defined at:
   429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
   430 ;; Parameters:    Size  Location     Type
   431 ;;  dividend        2    0[COMRAM] int 
   432 ;;  divisor         2    2[COMRAM] int 
   433 ;; Auto vars:     Size  Location     Type
   434 ;;  quotient        2    6[COMRAM] int 
   435 ;;  sign            1    5[COMRAM] unsigned char 
   436 ;;  counter         1    4[COMRAM] unsigned char 
   437 ;; Return value:  Size  Location     Type
   438 ;;                  2    0[COMRAM] int 
   439 ;; Registers used:
   440 ;;		wreg, status,2, status,0
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   446 ;;      Params:         4       0       0       0       0       0       0       0       0
   447 ;;      Locals:         4       0       0       0       0       0       0       0       0
   448 ;;      Temps:          0       0       0       0       0       0       0       0       0
   449 ;;      Totals:         8       0       0       0       0       0       0       0       0
   450 ;;Total ram usage:        8 bytes
   451 ;; Hardware stack levels used:    1
   452 ;; This function calls:
   453 ;;		Nothing
   454 ;; This function is called by:
   455 ;;		_conviertemon
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           	psect	text2
   460  0008BE                     __ptext2:
   461                           	opt stack 0
   462  0008BE                     ___awdiv:
   463                           	opt stack 29
   464                           
   465                           ;incstack = 0
   466  0008BE  0E00               	movlw	0
   467  0008C0  6E06               	movwf	___awdiv@sign,c
   468  0008C2  AE04               	btfss	___awdiv@divisor+1,7,c
   469  0008C4  D006               	goto	l338
   470  0008C6  6C03               	negf	___awdiv@divisor,c
   471  0008C8  1E04               	comf	___awdiv@divisor+1,f,c
   472  0008CA  B0D8               	btfsc	status,0,c
   473  0008CC  2A04               	incf	___awdiv@divisor+1,f,c
   474  0008CE  0E01               	movlw	1
   475  0008D0  6E06               	movwf	___awdiv@sign,c
   476  0008D2                     l338:
   477  0008D2  AE02               	btfss	___awdiv@dividend+1,7,c
   478  0008D4  D006               	goto	l339
   479  0008D6  6C01               	negf	___awdiv@dividend,c
   480  0008D8  1E02               	comf	___awdiv@dividend+1,f,c
   481  0008DA  B0D8               	btfsc	status,0,c
   482  0008DC  2A02               	incf	___awdiv@dividend+1,f,c
   483  0008DE  0E01               	movlw	1
   484  0008E0  1A06               	xorwf	___awdiv@sign,f,c
   485  0008E2                     l339:
   486  0008E2  0E00               	movlw	0
   487  0008E4  6E08               	movwf	___awdiv@quotient+1,c
   488  0008E6  0E00               	movlw	0
   489  0008E8  6E07               	movwf	___awdiv@quotient,c
   490  0008EA  5003               	movf	___awdiv@divisor,w,c
   491  0008EC  1004               	iorwf	___awdiv@divisor+1,w,c
   492  0008EE  B4D8               	btfsc	status,2,c
   493  0008F0  D01C               	goto	l346
   494  0008F2  0E01               	movlw	1
   495  0008F4  6E05               	movwf	___awdiv@counter,c
   496  0008F6  D004               	goto	l341
   497  0008F8  90D8               	bcf	status,0,c
   498  0008FA  3603               	rlcf	___awdiv@divisor,f,c
   499  0008FC  3604               	rlcf	___awdiv@divisor+1,f,c
   500  0008FE  2A05               	incf	___awdiv@counter,f,c
   501  000900                     l341:
   502  000900  AE04               	btfss	___awdiv@divisor+1,7,c
   503  000902  D7FA               	goto	l342
   504  000904                     u230:
   505  000904  90D8               	bcf	status,0,c
   506  000906  3607               	rlcf	___awdiv@quotient,f,c
   507  000908  3608               	rlcf	___awdiv@quotient+1,f,c
   508  00090A  5003               	movf	___awdiv@divisor,w,c
   509  00090C  5C01               	subwf	___awdiv@dividend,w,c
   510  00090E  5004               	movf	___awdiv@divisor+1,w,c
   511  000910  5802               	subwfb	___awdiv@dividend+1,w,c
   512  000912  A0D8               	btfss	status,0,c
   513  000914  D005               	goto	l345
   514  000916  5003               	movf	___awdiv@divisor,w,c
   515  000918  5E01               	subwf	___awdiv@dividend,f,c
   516  00091A  5004               	movf	___awdiv@divisor+1,w,c
   517  00091C  5A02               	subwfb	___awdiv@dividend+1,f,c
   518  00091E  8007               	bsf	___awdiv@quotient,0,c
   519  000920                     l345:
   520  000920  90D8               	bcf	status,0,c
   521  000922  3204               	rrcf	___awdiv@divisor+1,f,c
   522  000924  3203               	rrcf	___awdiv@divisor,f,c
   523  000926  2E05               	decfsz	___awdiv@counter,f,c
   524  000928  D7ED               	goto	u230
   525  00092A                     l346:
   526  00092A  5006               	movf	___awdiv@sign,w,c
   527  00092C  B4D8               	btfsc	status,2,c
   528  00092E  D004               	goto	l347
   529  000930  6C07               	negf	___awdiv@quotient,c
   530  000932  1E08               	comf	___awdiv@quotient+1,f,c
   531  000934  B0D8               	btfsc	status,0,c
   532  000936  2A08               	incf	___awdiv@quotient+1,f,c
   533  000938                     l347:
   534  000938  C007  F001         	movff	___awdiv@quotient,?___awdiv
   535  00093C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   536  000940  0012               	return	
   537  000942                     __end_of___awdiv:
   538                           	opt stack 0
   539                           tblptru	equ	0xFF8
   540                           prodl	equ	0xFF3
   541                           status	equ	0xFD8
   542                           
   543 ;; *************** function _arranca_LCD *****************
   544 ;; Defined at:
   545 ;;		line 44 in file "newmain.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;		None
   548 ;; Auto vars:     Size  Location     Type
   549 ;;		None
   550 ;; Return value:  Size  Location     Type
   551 ;;                  2    2[None  ] int 
   552 ;; Registers used:
   553 ;;		wreg, status,2, status,0, cstack
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   559 ;;      Params:         0       0       0       0       0       0       0       0       0
   560 ;;      Locals:         0       0       0       0       0       0       0       0       0
   561 ;;      Temps:          1       0       0       0       0       0       0       0       0
   562 ;;      Totals:         1       0       0       0       0       0       0       0       0
   563 ;;Total ram usage:        1 bytes
   564 ;; Hardware stack levels used:    1
   565 ;; Hardware stack levels required when called:    3
   566 ;; This function calls:
   567 ;;		_BORRAR_LCD
   568 ;;		_CURSOR_ONOFF
   569 ;;		_LCD_CONFIG
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           	psect	text3
   576  000BA2                     __ptext3:
   577                           	opt stack 0
   578  000BA2                     _arranca_LCD:
   579                           	opt stack 27
   580                           
   581                           ;newmain.c: 45: TRISD = 0x00;
   582                           
   583                           ;incstack = 0
   584  000BA2  0E00               	movlw	0
   585  000BA4  6E95               	movwf	3989,c	;volatile
   586                           
   587                           ;newmain.c: 46: LCD_CONFIG();
   588  000BA6  ECD5  F004         	call	_LCD_CONFIG	;wreg free
   589                           
   590                           ;newmain.c: 47: _delay((unsigned long)((10)*(4000000UL/4000.0)));
   591  000BAA  0E0D               	movlw	13
   592  000BAC  6E05               	movwf	??_arranca_LCD& (0+255),c
   593  000BAE  0EFC               	movlw	252
   594  000BB0                     u307:
   595  000BB0  2EE8               	decfsz	wreg,f,c
   596  000BB2  D7FE               	bra	u307
   597  000BB4  2E05               	decfsz	??_arranca_LCD& (0+255),f,c
   598  000BB6  D7FC               	bra	u307
   599                           
   600                           ;newmain.c: 48: BORRAR_LCD();
   601  000BB8  EC09  F006         	call	_BORRAR_LCD	;wreg free
   602                           
   603                           ;newmain.c: 49: CURSOR_ONOFF(1);
   604  000BBC  0E01               	movlw	1
   605  000BBE  ECE2  F005         	call	_CURSOR_ONOFF
   606  000BC2  0012               	return		;funcret
   607  000BC4                     __end_of_arranca_LCD:
   608                           	opt stack 0
   609                           tblptru	equ	0xFF8
   610                           prodl	equ	0xFF3
   611                           wreg	equ	0xFE8
   612                           status	equ	0xFD8
   613                           
   614 ;; *************** function _LCD_CONFIG *****************
   615 ;; Defined at:
   616 ;;		line 72 in file "LCD.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;		None
   619 ;; Auto vars:     Size  Location     Type
   620 ;;		None
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg, status,2, status,0, cstack
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   630 ;;      Params:         0       0       0       0       0       0       0       0       0
   631 ;;      Locals:         0       0       0       0       0       0       0       0       0
   632 ;;      Temps:          1       0       0       0       0       0       0       0       0
   633 ;;      Totals:         1       0       0       0       0       0       0       0       0
   634 ;;Total ram usage:        1 bytes
   635 ;; Hardware stack levels used:    1
   636 ;; Hardware stack levels required when called:    2
   637 ;; This function calls:
   638 ;;		_ENVIA_LCD_CMD
   639 ;;		_ENVIA_NIBBLE
   640 ;; This function is called by:
   641 ;;		_arranca_LCD
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text4
   646  0009AA                     __ptext4:
   647                           	opt stack 0
   648  0009AA                     _LCD_CONFIG:
   649                           	opt stack 27
   650                           
   651                           ;LCD.c: 74: LATDbits.LATD0 = 0;
   652                           
   653                           ;incstack = 0
   654  0009AA  908C               	bcf	3980,0,c	;volatile
   655                           
   656                           ;LCD.c: 75: LATDbits.LATD1 = 0;
   657  0009AC  928C               	bcf	3980,1,c	;volatile
   658                           
   659                           ;LCD.c: 76: ENVIA_NIBBLE(0x30);
   660  0009AE  0E30               	movlw	48
   661  0009B0  ECF0  F005         	call	_ENVIA_NIBBLE
   662                           
   663                           ;LCD.c: 77: _delay(24000);
   664  0009B4  0E20               	movlw	32
   665  0009B6  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   666  0009B8  0E2A               	movlw	42
   667  0009BA                     u317:
   668  0009BA  2EE8               	decfsz	wreg,f,c
   669  0009BC  D7FE               	bra	u317
   670  0009BE  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   671  0009C0  D7FC               	bra	u317
   672                           
   673                           ;LCD.c: 78: _delay(24000);
   674  0009C2  0E20               	movlw	32
   675  0009C4  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   676  0009C6  0E2A               	movlw	42
   677  0009C8                     u327:
   678  0009C8  2EE8               	decfsz	wreg,f,c
   679  0009CA  D7FE               	bra	u327
   680  0009CC  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   681  0009CE  D7FC               	bra	u327
   682                           
   683                           ;LCD.c: 81: ENVIA_NIBBLE(0x30);
   684  0009D0  0E30               	movlw	48
   685  0009D2  ECF0  F005         	call	_ENVIA_NIBBLE
   686                           
   687                           ;LCD.c: 83: _delay(1200);
   688  0009D6  0EF0               	movlw	240
   689  0009D8                     u337:
   690  0009D8  D000               	nop2	
   691  0009DA  2EE8               	decfsz	wreg,f,c
   692  0009DC  D7FD               	bra	u337
   693                           
   694                           ;LCD.c: 84: ENVIA_NIBBLE(0x30);
   695  0009DE  0E30               	movlw	48
   696  0009E0  ECF0  F005         	call	_ENVIA_NIBBLE
   697                           
   698                           ;LCD.c: 85: ENVIA_NIBBLE(0x20);
   699  0009E4  0E20               	movlw	32
   700  0009E6  ECF0  F005         	call	_ENVIA_NIBBLE
   701                           
   702                           ;LCD.c: 86: ENVIA_LCD_CMD(0x01);
   703  0009EA  0E01               	movlw	1
   704  0009EC  EC8F  F005         	call	_ENVIA_LCD_CMD
   705                           
   706                           ;LCD.c: 87: ENVIA_LCD_CMD(0x28);
   707  0009F0  0E28               	movlw	40
   708  0009F2  EC8F  F005         	call	_ENVIA_LCD_CMD
   709                           
   710                           ;LCD.c: 88: ENVIA_LCD_CMD(0x0F);
   711  0009F6  0E0F               	movlw	15
   712  0009F8  EC8F  F005         	call	_ENVIA_LCD_CMD
   713                           
   714                           ;LCD.c: 89: ENVIA_LCD_CMD(0x06);
   715  0009FC  0E06               	movlw	6
   716  0009FE  EC8F  F005         	call	_ENVIA_LCD_CMD
   717                           
   718                           ;LCD.c: 90: ENVIA_LCD_CMD(0x01);
   719  000A02  0E01               	movlw	1
   720  000A04  EC8F  F005         	call	_ENVIA_LCD_CMD
   721  000A08  0012               	return		;funcret
   722  000A0A                     __end_of_LCD_CONFIG:
   723                           	opt stack 0
   724                           tblptru	equ	0xFF8
   725                           prodl	equ	0xFF3
   726                           wreg	equ	0xFE8
   727                           status	equ	0xFD8
   728                           
   729 ;; *************** function _CURSOR_ONOFF *****************
   730 ;; Defined at:
   731 ;;		line 35 in file "LCD.c"
   732 ;; Parameters:    Size  Location     Type
   733 ;;  estado          1    wreg     unsigned char 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  estado          1    3[COMRAM] unsigned char 
   736 ;; Return value:  Size  Location     Type
   737 ;;                  1    wreg      void 
   738 ;; Registers used:
   739 ;;		wreg, status,2, status,0, cstack
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   745 ;;      Params:         0       0       0       0       0       0       0       0       0
   746 ;;      Locals:         1       0       0       0       0       0       0       0       0
   747 ;;      Temps:          0       0       0       0       0       0       0       0       0
   748 ;;      Totals:         1       0       0       0       0       0       0       0       0
   749 ;;Total ram usage:        1 bytes
   750 ;; Hardware stack levels used:    1
   751 ;; Hardware stack levels required when called:    2
   752 ;; This function calls:
   753 ;;		_ENVIA_LCD_CMD
   754 ;; This function is called by:
   755 ;;		_arranca_LCD
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text5
   760  000BC4                     __ptext5:
   761                           	opt stack 0
   762  000BC4                     _CURSOR_ONOFF:
   763                           	opt stack 27
   764                           
   765                           ;incstack = 0
   766                           ;CURSOR_ONOFF@estado stored from wreg
   767  000BC4  6E04               	movwf	CURSOR_ONOFF@estado,c
   768                           
   769                           ;LCD.c: 37: if(estado == 0) ENVIA_LCD_CMD(0x0E);
   770  000BC6  5004               	movf	CURSOR_ONOFF@estado,w,c
   771  000BC8  A4D8               	btfss	status,2,c
   772  000BCA  D003               	goto	l136
   773  000BCC  0E0E               	movlw	14
   774  000BCE  EC8F  F005         	call	_ENVIA_LCD_CMD
   775  000BD2                     l136:
   776                           
   777                           ;LCD.c: 38: if(estado == 1) ENVIA_LCD_CMD(0x0C);
   778  000BD2  0404               	decf	CURSOR_ONOFF@estado,w,c
   779  000BD4  A4D8               	btfss	status,2,c
   780  000BD6  0012               	return	
   781  000BD8  0E0C               	movlw	12
   782  000BDA  EC8F  F005         	call	_ENVIA_LCD_CMD
   783  000BDE  0012               	return	
   784  000BE0                     __end_of_CURSOR_ONOFF:
   785                           	opt stack 0
   786                           tblptru	equ	0xFF8
   787                           prodl	equ	0xFF3
   788                           wreg	equ	0xFE8
   789                           status	equ	0xFD8
   790                           
   791 ;; *************** function _BORRAR_LCD *****************
   792 ;; Defined at:
   793 ;;		line 67 in file "LCD.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;		None
   798 ;; Return value:  Size  Location     Type
   799 ;;                  1    wreg      void 
   800 ;; Registers used:
   801 ;;		wreg, status,2, status,0, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   807 ;;      Params:         0       0       0       0       0       0       0       0       0
   808 ;;      Locals:         0       0       0       0       0       0       0       0       0
   809 ;;      Temps:          0       0       0       0       0       0       0       0       0
   810 ;;      Totals:         0       0       0       0       0       0       0       0       0
   811 ;;Total ram usage:        0 bytes
   812 ;; Hardware stack levels used:    1
   813 ;; Hardware stack levels required when called:    2
   814 ;; This function calls:
   815 ;;		_ENVIA_LCD_CMD
   816 ;; This function is called by:
   817 ;;		_arranca_LCD
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text6
   822  000C12                     __ptext6:
   823                           	opt stack 0
   824  000C12                     _BORRAR_LCD:
   825                           	opt stack 27
   826                           
   827                           ;LCD.c: 69: ENVIA_LCD_CMD(0x01);
   828                           
   829                           ;incstack = 0
   830  000C12  0E01               	movlw	1
   831  000C14  EC8F  F005         	call	_ENVIA_LCD_CMD
   832  000C18  0012               	return		;funcret
   833  000C1A                     __end_of_BORRAR_LCD:
   834                           	opt stack 0
   835                           tblptru	equ	0xFF8
   836                           prodl	equ	0xFF3
   837                           wreg	equ	0xFE8
   838                           status	equ	0xFD8
   839                           
   840 ;; *************** function _POS_CURSOR *****************
   841 ;; Defined at:
   842 ;;		line 6 in file "LCD.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;  fila            1    wreg     unsigned char 
   845 ;;  columna         1    3[COMRAM] unsigned char 
   846 ;; Auto vars:     Size  Location     Type
   847 ;;  fila            1    4[COMRAM] unsigned char 
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      void 
   850 ;; Registers used:
   851 ;;		wreg, status,2, status,0, cstack
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   857 ;;      Params:         1       0       0       0       0       0       0       0       0
   858 ;;      Locals:         1       0       0       0       0       0       0       0       0
   859 ;;      Temps:          0       0       0       0       0       0       0       0       0
   860 ;;      Totals:         2       0       0       0       0       0       0       0       0
   861 ;;Total ram usage:        2 bytes
   862 ;; Hardware stack levels used:    1
   863 ;; Hardware stack levels required when called:    2
   864 ;; This function calls:
   865 ;;		_ENVIA_LCD_CMD
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text7
   872  000B7E                     __ptext7:
   873                           	opt stack 0
   874  000B7E                     _POS_CURSOR:
   875                           	opt stack 28
   876                           
   877                           ;incstack = 0
   878                           ;POS_CURSOR@fila stored from wreg
   879  000B7E  6E05               	movwf	POS_CURSOR@fila,c
   880                           
   881                           ;LCD.c: 8: if(fila == 1)
   882  000B80  0405               	decf	POS_CURSOR@fila,w,c
   883  000B82  A4D8               	btfss	status,2,c
   884  000B84  D005               	goto	l117
   885                           
   886                           ;LCD.c: 9: {
   887                           ;LCD.c: 10: ENVIA_LCD_CMD(0x80+columna);
   888  000B86  5004               	movf	POS_CURSOR@columna,w,c
   889  000B88  0F80               	addlw	128
   890  000B8A  EC8F  F005         	call	_ENVIA_LCD_CMD
   891                           
   892                           ;LCD.c: 11: }
   893  000B8E  0012               	return	
   894  000B90                     l117:
   895                           
   896                           ;LCD.c: 12: else if(fila == 2)
   897  000B90  0E02               	movlw	2
   898  000B92  1805               	xorwf	POS_CURSOR@fila,w,c
   899  000B94  A4D8               	btfss	status,2,c
   900  000B96  0012               	return	
   901                           
   902                           ;LCD.c: 13: {
   903                           ;LCD.c: 14: ENVIA_LCD_CMD(0xC0+columna);
   904  000B98  5004               	movf	POS_CURSOR@columna,w,c
   905  000B9A  0FC0               	addlw	192
   906  000B9C  EC8F  F005         	call	_ENVIA_LCD_CMD
   907  000BA0  0012               	return	
   908  000BA2                     __end_of_POS_CURSOR:
   909                           	opt stack 0
   910                           tblptru	equ	0xFF8
   911                           prodl	equ	0xFF3
   912                           wreg	equ	0xFE8
   913                           status	equ	0xFD8
   914                           
   915 ;; *************** function _ESCRIBE_MENSAJE *****************
   916 ;; Defined at:
   917 ;;		line 41 in file "LCD.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   920 ;;		 -> STR_2(7), STR_1(16), 
   921 ;;  tam             1    5[COMRAM] unsigned char 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  i               1    8[COMRAM] unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 0/0
   930 ;;		On exit  : 0/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   933 ;;      Params:         3       0       0       0       0       0       0       0       0
   934 ;;      Locals:         1       0       0       0       0       0       0       0       0
   935 ;;      Temps:          2       0       0       0       0       0       0       0       0
   936 ;;      Totals:         6       0       0       0       0       0       0       0       0
   937 ;;Total ram usage:        6 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; Hardware stack levels required when called:    2
   940 ;; This function calls:
   941 ;;		_ENVIA_CHAR
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text8
   948  000AB0                     __ptext8:
   949                           	opt stack 0
   950  000AB0                     _ESCRIBE_MENSAJE:
   951                           	opt stack 28
   952                           
   953                           ;LCD.c: 43: unsigned char i = 0;
   954                           
   955                           ;incstack = 0
   956  000AB0  0E00               	movlw	0
   957  000AB2  6E09               	movwf	ESCRIBE_MENSAJE@i,c
   958                           
   959                           ;LCD.c: 44: for(i = 0; i<tam; i++)
   960  000AB4  0E00               	movlw	0
   961  000AB6  6E09               	movwf	ESCRIBE_MENSAJE@i,c
   962  000AB8  D013               	goto	l141
   963  000ABA                     
   964                           ;LCD.c: 45: {
   965                           ;LCD.c: 46: ENVIA_CHAR(cadena[i]);
   966  000ABA  5009               	movf	ESCRIBE_MENSAJE@i,w,c
   967  000ABC  0D01               	mullw	1
   968  000ABE  C004  F007         	movff	ESCRIBE_MENSAJE@cadena,??_ESCRIBE_MENSAJE
   969  000AC2  C005  F008         	movff	ESCRIBE_MENSAJE@cadena+1,??_ESCRIBE_MENSAJE+1
   970  000AC6  50F3               	movf	prodl,w,c
   971  000AC8  2607               	addwf	??_ESCRIBE_MENSAJE,f,c
   972  000ACA  50F4               	movf	prodh,w,c
   973  000ACC  2208               	addwfc	??_ESCRIBE_MENSAJE+1,f,c
   974  000ACE  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
   975  000AD2  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
   976  000AD6                     	if	0	;tblptru may be non-zero
   977  000AD6                     	endif
   978  000AD6                     	if	0	;tblptru may be non-zero
   979  000AD6                     	endif
   980  000AD6  0008               	tblrd		*
   981  000AD8  50F5               	movf	tablat,w,c
   982  000ADA  EC75  F005         	call	_ENVIA_CHAR
   983  000ADE  2A09               	incf	ESCRIBE_MENSAJE@i,f,c
   984  000AE0                     l141:
   985  000AE0  5006               	movf	ESCRIBE_MENSAJE@tam,w,c
   986  000AE2  5C09               	subwf	ESCRIBE_MENSAJE@i,w,c
   987  000AE4  B0D8               	btfsc	status,0,c
   988  000AE6  0012               	return	
   989  000AE8  D7E8               	goto	l142
   990  000AEA                     __end_of_ESCRIBE_MENSAJE:
   991                           	opt stack 0
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           prodh	equ	0xFF4
   997                           prodl	equ	0xFF3
   998                           wreg	equ	0xFE8
   999                           status	equ	0xFD8
  1000                           
  1001 ;; *************** function _ENVIA_CHAR *****************
  1002 ;; Defined at:
  1003 ;;		line 50 in file "LCD.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;  dato            1    wreg     unsigned char 
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;  dato            1    1[COMRAM] unsigned char 
  1008 ;;  aux             1    2[COMRAM] unsigned char 
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      void 
  1011 ;; Registers used:
  1012 ;;		wreg, status,2, status,0, cstack
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1018 ;;      Params:         0       0       0       0       0       0       0       0       0
  1019 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1020 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1021 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1022 ;;Total ram usage:        2 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; Hardware stack levels required when called:    1
  1025 ;; This function calls:
  1026 ;;		_ENVIA_NIBBLE
  1027 ;;		_LEER_LCD
  1028 ;; This function is called by:
  1029 ;;		_main
  1030 ;;		_ESCRIBE_MENSAJE
  1031 ;;		_GENERACARACTER
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text9
  1036  000AEA                     __ptext9:
  1037                           	opt stack 0
  1038  000AEA                     _ENVIA_CHAR:
  1039                           	opt stack 28
  1040                           
  1041                           ;incstack = 0
  1042                           ;ENVIA_CHAR@dato stored from wreg
  1043  000AEA  6E02               	movwf	ENVIA_CHAR@dato,c
  1044                           
  1045                           ;LCD.c: 52: unsigned char aux;
  1046                           ;LCD.c: 53: LATDbits.LATD0 = 1;
  1047  000AEC  808C               	bsf	3980,0,c	;volatile
  1048                           
  1049                           ;LCD.c: 54: LEER_LCD();
  1050  000AEE  EC05  F005         	call	_LEER_LCD	;wreg free
  1051                           
  1052                           ;LCD.c: 55: TRISD = 0x00;
  1053  000AF2  0E00               	movlw	0
  1054  000AF4  6E95               	movwf	3989,c	;volatile
  1055                           
  1056                           ;LCD.c: 56: _delay(1200);
  1057  000AF6  0EF0               	movlw	240
  1058  000AF8                     u347:
  1059  000AF8  D000               	nop2	
  1060  000AFA  2EE8               	decfsz	wreg,f,c
  1061  000AFC  D7FD               	bra	u347
  1062                           
  1063                           ;LCD.c: 58: LATDbits.LATD1 = 0;
  1064  000AFE  928C               	bcf	3980,1,c	;volatile
  1065                           
  1066                           ;LCD.c: 59: LATDbits.LATD2 = 0;
  1067  000B00  948C               	bcf	3980,2,c	;volatile
  1068                           
  1069                           ;LCD.c: 60: LATDbits.LATD0 = 1;
  1070  000B02  808C               	bsf	3980,0,c	;volatile
  1071                           
  1072                           ;LCD.c: 61: aux = dato & 0xF0;
  1073  000B04  5002               	movf	ENVIA_CHAR@dato,w,c
  1074  000B06  0BF0               	andlw	240
  1075  000B08  6E03               	movwf	ENVIA_CHAR@aux,c
  1076                           
  1077                           ;LCD.c: 62: ENVIA_NIBBLE(aux);
  1078  000B0A  5003               	movf	ENVIA_CHAR@aux,w,c
  1079  000B0C  ECF0  F005         	call	_ENVIA_NIBBLE
  1080                           
  1081                           ;LCD.c: 63: aux = dato << 4;
  1082  000B10  3802               	swapf	ENVIA_CHAR@dato,w,c
  1083  000B12  0BF0               	andlw	240
  1084  000B14  6E03               	movwf	ENVIA_CHAR@aux,c
  1085                           
  1086                           ;LCD.c: 64: ENVIA_NIBBLE(aux);
  1087  000B16  5003               	movf	ENVIA_CHAR@aux,w,c
  1088  000B18  ECF0  F005         	call	_ENVIA_NIBBLE
  1089  000B1C  0012               	return		;funcret
  1090  000B1E                     __end_of_ENVIA_CHAR:
  1091                           	opt stack 0
  1092                           tblptru	equ	0xFF8
  1093                           tblptrh	equ	0xFF7
  1094                           tblptrl	equ	0xFF6
  1095                           tablat	equ	0xFF5
  1096                           prodh	equ	0xFF4
  1097                           prodl	equ	0xFF3
  1098                           wreg	equ	0xFE8
  1099                           status	equ	0xFD8
  1100                           
  1101 ;; *************** function _CURSOR_HOME *****************
  1102 ;; Defined at:
  1103 ;;		line 30 in file "LCD.c"
  1104 ;; Parameters:    Size  Location     Type
  1105 ;;		None
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;		None
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      void 
  1110 ;; Registers used:
  1111 ;;		wreg, status,2, status,0, cstack
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1117 ;;      Params:         0       0       0       0       0       0       0       0       0
  1118 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1119 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1120 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1121 ;;Total ram usage:        0 bytes
  1122 ;; Hardware stack levels used:    1
  1123 ;; Hardware stack levels required when called:    2
  1124 ;; This function calls:
  1125 ;;		_ENVIA_LCD_CMD
  1126 ;; This function is called by:
  1127 ;;		_main
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text10
  1132  000C1A                     __ptext10:
  1133                           	opt stack 0
  1134  000C1A                     _CURSOR_HOME:
  1135                           	opt stack 28
  1136                           
  1137                           ;LCD.c: 32: ENVIA_LCD_CMD(0x02);
  1138                           
  1139                           ;incstack = 0
  1140  000C1A  0E02               	movlw	2
  1141  000C1C  EC8F  F005         	call	_ENVIA_LCD_CMD
  1142  000C20  0012               	return		;funcret
  1143  000C22                     __end_of_CURSOR_HOME:
  1144                           	opt stack 0
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           prodh	equ	0xFF4
  1150                           prodl	equ	0xFF3
  1151                           wreg	equ	0xFE8
  1152                           status	equ	0xFD8
  1153                           
  1154 ;; *************** function _ENVIA_LCD_CMD *****************
  1155 ;; Defined at:
  1156 ;;		line 104 in file "LCD.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;  dato            1    wreg     unsigned char 
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;  dato            1    1[COMRAM] unsigned char 
  1161 ;;  aux             1    2[COMRAM] unsigned char 
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    wreg      void 
  1164 ;; Registers used:
  1165 ;;		wreg, status,2, status,0, cstack
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1171 ;;      Params:         0       0       0       0       0       0       0       0       0
  1172 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1173 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1174 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1175 ;;Total ram usage:        2 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; Hardware stack levels required when called:    1
  1178 ;; This function calls:
  1179 ;;		_ENVIA_NIBBLE
  1180 ;;		_LEER_LCD
  1181 ;; This function is called by:
  1182 ;;		_POS_CURSOR
  1183 ;;		_CURSOR_HOME
  1184 ;;		_CURSOR_ONOFF
  1185 ;;		_BORRAR_LCD
  1186 ;;		_LCD_CONFIG
  1187 ;;		_BLINK_CURSOR
  1188 ;;		_DISPLAY_ONOFF
  1189 ;;		_GENERACARACTER
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text11
  1194  000B1E                     __ptext11:
  1195                           	opt stack 0
  1196  000B1E                     _ENVIA_LCD_CMD:
  1197                           	opt stack 27
  1198                           
  1199                           ;incstack = 0
  1200                           ;ENVIA_LCD_CMD@dato stored from wreg
  1201  000B1E  6E02               	movwf	ENVIA_LCD_CMD@dato,c
  1202                           
  1203                           ;LCD.c: 106: unsigned char aux;
  1204                           ;LCD.c: 107: LATDbits.LATD0 = 0;
  1205  000B20  908C               	bcf	3980,0,c	;volatile
  1206                           
  1207                           ;LCD.c: 108: LEER_LCD();
  1208  000B22  EC05  F005         	call	_LEER_LCD	;wreg free
  1209                           
  1210                           ;LCD.c: 109: TRISD = 0b00000000;
  1211  000B26  0E00               	movlw	0
  1212  000B28  6E95               	movwf	3989,c	;volatile
  1213                           
  1214                           ;LCD.c: 111: _delay(1200);
  1215  000B2A  0EF0               	movlw	240
  1216  000B2C                     u357:
  1217  000B2C  D000               	nop2	
  1218  000B2E  2EE8               	decfsz	wreg,f,c
  1219  000B30  D7FD               	bra	u357
  1220                           
  1221                           ;LCD.c: 112: LATDbits.LATD1 = 0;
  1222  000B32  928C               	bcf	3980,1,c	;volatile
  1223                           
  1224                           ;LCD.c: 113: LATDbits.LATD2 = 0;
  1225  000B34  948C               	bcf	3980,2,c	;volatile
  1226                           
  1227                           ;LCD.c: 114: LATDbits.LATD0 = 0;
  1228  000B36  908C               	bcf	3980,0,c	;volatile
  1229                           
  1230                           ;LCD.c: 115: aux = dato & 0xF0;
  1231  000B38  5002               	movf	ENVIA_LCD_CMD@dato,w,c
  1232  000B3A  0BF0               	andlw	240
  1233  000B3C  6E03               	movwf	ENVIA_LCD_CMD@aux,c
  1234                           
  1235                           ;LCD.c: 116: ENVIA_NIBBLE(aux);
  1236  000B3E  5003               	movf	ENVIA_LCD_CMD@aux,w,c
  1237  000B40  ECF0  F005         	call	_ENVIA_NIBBLE
  1238                           
  1239                           ;LCD.c: 117: aux = dato<<4;
  1240  000B44  3802               	swapf	ENVIA_LCD_CMD@dato,w,c
  1241  000B46  0BF0               	andlw	240
  1242  000B48  6E03               	movwf	ENVIA_LCD_CMD@aux,c
  1243                           
  1244                           ;LCD.c: 118: ENVIA_NIBBLE(aux);
  1245  000B4A  5003               	movf	ENVIA_LCD_CMD@aux,w,c
  1246  000B4C  ECF0  F005         	call	_ENVIA_NIBBLE
  1247  000B50  0012               	return		;funcret
  1248  000B52                     __end_of_ENVIA_LCD_CMD:
  1249                           	opt stack 0
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           prodh	equ	0xFF4
  1255                           prodl	equ	0xFF3
  1256                           wreg	equ	0xFE8
  1257                           status	equ	0xFD8
  1258                           
  1259 ;; *************** function _LEER_LCD *****************
  1260 ;; Defined at:
  1261 ;;		line 121 in file "LCD.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;		None
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;  aux             1    0[COMRAM] unsigned char 
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  1    wreg      void 
  1268 ;; Registers used:
  1269 ;;		wreg, status,2, status,0
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1275 ;;      Params:         0       0       0       0       0       0       0       0       0
  1276 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1278 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1279 ;;Total ram usage:        1 bytes
  1280 ;; Hardware stack levels used:    1
  1281 ;; This function calls:
  1282 ;;		Nothing
  1283 ;; This function is called by:
  1284 ;;		_ENVIA_CHAR
  1285 ;;		_ENVIA_LCD_CMD
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           	psect	text12
  1290  000A0A                     __ptext12:
  1291                           	opt stack 0
  1292  000A0A                     _LEER_LCD:
  1293                           	opt stack 27
  1294                           
  1295                           ;LCD.c: 123: unsigned char aux;
  1296                           ;LCD.c: 124: TRISD = 0xF8;
  1297                           
  1298                           ;incstack = 0
  1299  000A0A  0EF8               	movlw	248
  1300  000A0C  6E95               	movwf	3989,c	;volatile
  1301                           
  1302                           ;LCD.c: 125: LATDbits.LATD0 = 0;
  1303  000A0E  908C               	bcf	3980,0,c	;volatile
  1304                           
  1305                           ;LCD.c: 126: LATDbits.LATD1 = 1;
  1306  000A10  828C               	bsf	3980,1,c	;volatile
  1307                           
  1308                           ;LCD.c: 127: LATDbits.LATD2 = 1;
  1309  000A12  848C               	bsf	3980,2,c	;volatile
  1310                           
  1311                           ;LCD.c: 128: _delay(1200);
  1312  000A14  0EF0               	movlw	240
  1313  000A16                     u367:
  1314  000A16  D000               	nop2	
  1315  000A18  2EE8               	decfsz	wreg,f,c
  1316  000A1A  D7FD               	bra	u367
  1317                           
  1318                           ;LCD.c: 130: aux = PORTD;
  1319  000A1C  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1320                           
  1321                           ;LCD.c: 131: LATDbits.LATD2 = 0;
  1322  000A20  948C               	bcf	3980,2,c	;volatile
  1323                           
  1324                           ;LCD.c: 132: _delay(1200);
  1325  000A22  0EF0               	movlw	240
  1326  000A24                     u377:
  1327  000A24  D000               	nop2	
  1328  000A26  2EE8               	decfsz	wreg,f,c
  1329  000A28  D7FD               	bra	u377
  1330                           
  1331                           ;LCD.c: 134: LATDbits.LATD2 = 1;
  1332  000A2A  848C               	bsf	3980,2,c	;volatile
  1333                           
  1334                           ;LCD.c: 135: _delay(1200);
  1335  000A2C  0EF0               	movlw	240
  1336  000A2E                     u387:
  1337  000A2E  D000               	nop2	
  1338  000A30  2EE8               	decfsz	wreg,f,c
  1339  000A32  D7FD               	bra	u387
  1340  000A34  D011               	goto	l824
  1341  000A36                     l163:
  1342                           
  1343                           ;LCD.c: 140: {
  1344                           ;LCD.c: 141: LATDbits.LATD2 = 1;
  1345  000A36  848C               	bsf	3980,2,c	;volatile
  1346                           
  1347                           ;LCD.c: 142: _delay(1200);
  1348  000A38  0EF0               	movlw	240
  1349  000A3A                     u397:
  1350  000A3A  D000               	nop2	
  1351  000A3C  2EE8               	decfsz	wreg,f,c
  1352  000A3E  D7FD               	bra	u397
  1353                           
  1354                           ;LCD.c: 143: aux = PORTD;
  1355  000A40  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1356                           
  1357                           ;LCD.c: 144: LATDbits.LATD2 = 0;
  1358  000A44  948C               	bcf	3980,2,c	;volatile
  1359                           
  1360                           ;LCD.c: 145: _delay(1200);
  1361  000A46  0EF0               	movlw	240
  1362  000A48                     u407:
  1363  000A48  D000               	nop2	
  1364  000A4A  2EE8               	decfsz	wreg,f,c
  1365  000A4C  D7FD               	bra	u407
  1366                           
  1367                           ;LCD.c: 146: LATDbits.LATD2 = 1;
  1368  000A4E  848C               	bsf	3980,2,c	;volatile
  1369                           
  1370                           ;LCD.c: 147: _delay(1200);
  1371  000A50  0EF0               	movlw	240
  1372  000A52                     u417:
  1373  000A52  D000               	nop2	
  1374  000A54  2EE8               	decfsz	wreg,f,c
  1375  000A56  D7FD               	bra	u417
  1376  000A58                     l824:
  1377                           
  1378                           ;LCD.c: 148: LATDbits.LATD2 = 0;
  1379  000A58  948C               	bcf	3980,2,c	;volatile
  1380                           
  1381                           ;LCD.c: 149: aux = aux & 0x80;
  1382  000A5A  5001               	movf	LEER_LCD@aux,w,c
  1383  000A5C  0B80               	andlw	128
  1384  000A5E  6E01               	movwf	LEER_LCD@aux,c
  1385  000A60  0E80               	movlw	128
  1386  000A62  1801               	xorwf	LEER_LCD@aux,w,c
  1387  000A64  A4D8               	btfss	status,2,c
  1388  000A66  0012               	return	
  1389  000A68  D7E6               	goto	l163
  1390  000A6A                     __end_of_LEER_LCD:
  1391                           	opt stack 0
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           prodh	equ	0xFF4
  1397                           prodl	equ	0xFF3
  1398                           wreg	equ	0xFE8
  1399                           status	equ	0xFD8
  1400                           
  1401 ;; *************** function _ENVIA_NIBBLE *****************
  1402 ;; Defined at:
  1403 ;;		line 93 in file "LCD.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;  dato            1    wreg     unsigned char 
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;  dato            1    0[COMRAM] unsigned char 
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  1    wreg      void 
  1410 ;; Registers used:
  1411 ;;		wreg, status,2, status,0
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1417 ;;      Params:         0       0       0       0       0       0       0       0       0
  1418 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1419 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1420 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1421 ;;Total ram usage:        1 bytes
  1422 ;; Hardware stack levels used:    1
  1423 ;; This function calls:
  1424 ;;		Nothing
  1425 ;; This function is called by:
  1426 ;;		_ENVIA_CHAR
  1427 ;;		_LCD_CONFIG
  1428 ;;		_ENVIA_LCD_CMD
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text13
  1433  000BE0                     __ptext13:
  1434                           	opt stack 0
  1435  000BE0                     _ENVIA_NIBBLE:
  1436                           	opt stack 28
  1437                           
  1438                           ;incstack = 0
  1439                           ;ENVIA_NIBBLE@dato stored from wreg
  1440  000BE0  6E01               	movwf	ENVIA_NIBBLE@dato,c
  1441                           
  1442                           ;LCD.c: 95: LATD &= 0x0F;
  1443  000BE2  0E0F               	movlw	15
  1444  000BE4  168C               	andwf	3980,f,c	;volatile
  1445                           
  1446                           ;LCD.c: 96: dato &= 0xF0;
  1447  000BE6  0EF0               	movlw	240
  1448  000BE8  1601               	andwf	ENVIA_NIBBLE@dato,f,c
  1449                           
  1450                           ;LCD.c: 97: LATD|= dato;
  1451  000BEA  5001               	movf	ENVIA_NIBBLE@dato,w,c
  1452  000BEC  128C               	iorwf	3980,f,c	;volatile
  1453                           
  1454                           ;LCD.c: 98: LATDbits.LATD2 = 1;
  1455  000BEE  848C               	bsf	3980,2,c	;volatile
  1456                           
  1457                           ;LCD.c: 100: _delay(1200);
  1458  000BF0  0EF0               	movlw	240
  1459  000BF2                     u427:
  1460  000BF2  D000               	nop2	
  1461  000BF4  2EE8               	decfsz	wreg,f,c
  1462  000BF6  D7FD               	bra	u427
  1463                           
  1464                           ;LCD.c: 101: LATDbits.LATD2 = 0;
  1465  000BF8  948C               	bcf	3980,2,c	;volatile
  1466  000BFA  0012               	return		;funcret
  1467  000BFC                     __end_of_ENVIA_NIBBLE:
  1468                           	opt stack 0
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           prodh	equ	0xFF4
  1474                           prodl	equ	0xFF3
  1475                           wreg	equ	0xFE8
  1476                           status	equ	0xFD8
  1477                           
  1478 ;; *************** function _ADC_CONVERTIR *****************
  1479 ;; Defined at:
  1480 ;;		line 68 in file "ADC.c"
  1481 ;; Parameters:    Size  Location     Type
  1482 ;;		None
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;  num             2    3[COMRAM] int 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  2    0[COMRAM] int 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1494 ;;      Params:         2       0       0       0       0       0       0       0       0
  1495 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1496 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1497 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1498 ;;Total ram usage:        5 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; This function calls:
  1501 ;;		Nothing
  1502 ;; This function is called by:
  1503 ;;		_main
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           	psect	text14
  1508  000B52                     __ptext14:
  1509                           	opt stack 0
  1510  000B52                     _ADC_CONVERTIR:
  1511                           	opt stack 30
  1512                           
  1513                           ;ADC.c: 70: int num;
  1514                           ;ADC.c: 71: ADCON0bits.GO = 1;
  1515                           
  1516                           ;incstack = 0
  1517  000B52  82C2               	bsf	4034,1,c	;volatile
  1518  000B54  B2C2               	btfsc	4034,1,c	;volatile
  1519  000B56  D7FE               	goto	l94
  1520                           
  1521                           ;ADC.c: 73: num = 0x03 & ADRESH;
  1522  000B58  CFC4 F003          	movff	4036,??_ADC_CONVERTIR	;volatile
  1523  000B5C  0E03               	movlw	3
  1524  000B5E  1603               	andwf	??_ADC_CONVERTIR,f,c
  1525  000B60  5003               	movf	??_ADC_CONVERTIR,w,c
  1526  000B62  6E04               	movwf	ADC_CONVERTIR@num,c
  1527  000B64  6A05               	clrf	ADC_CONVERTIR@num+1,c
  1528                           
  1529                           ;ADC.c: 74: num<<= 8;
  1530  000B66  5004               	movf	ADC_CONVERTIR@num,w,c
  1531  000B68  6E05               	movwf	ADC_CONVERTIR@num+1,c
  1532  000B6A  6A04               	clrf	ADC_CONVERTIR@num,c
  1533                           
  1534                           ;ADC.c: 75: num +=ADRESL;
  1535  000B6C  50C3               	movf	4035,w,c	;volatile
  1536  000B6E  2604               	addwf	ADC_CONVERTIR@num,f,c
  1537  000B70  0E00               	movlw	0
  1538  000B72  2205               	addwfc	ADC_CONVERTIR@num+1,f,c
  1539                           
  1540                           ;ADC.c: 76: return(num);
  1541  000B74  C004  F001         	movff	ADC_CONVERTIR@num,?_ADC_CONVERTIR
  1542  000B78  C005  F002         	movff	ADC_CONVERTIR@num+1,?_ADC_CONVERTIR+1
  1543  000B7C  0012               	return	
  1544  000B7E                     __end_of_ADC_CONVERTIR:
  1545                           	opt stack 0
  1546                           tblptru	equ	0xFF8
  1547                           tblptrh	equ	0xFF7
  1548                           tblptrl	equ	0xFF6
  1549                           tablat	equ	0xFF5
  1550                           prodh	equ	0xFF4
  1551                           prodl	equ	0xFF3
  1552                           wreg	equ	0xFE8
  1553                           status	equ	0xFD8
  1554                           
  1555 ;; *************** function _ADC_CONFIG *****************
  1556 ;; Defined at:
  1557 ;;		line 5 in file "ADC.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  canal           1    wreg     unsigned char 
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  canal           1    0[COMRAM] unsigned char 
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      void 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2, status,0
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1571 ;;      Params:         0       0       0       0       0       0       0       0       0
  1572 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1573 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1574 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1575 ;;Total ram usage:        1 bytes
  1576 ;; Hardware stack levels used:    1
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_main
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text15
  1585  00081A                     __ptext15:
  1586                           	opt stack 0
  1587  00081A                     _ADC_CONFIG:
  1588                           	opt stack 30
  1589                           
  1590                           ;incstack = 0
  1591                           ;ADC_CONFIG@canal stored from wreg
  1592  00081A  6E01               	movwf	ADC_CONFIG@canal,c
  1593                           
  1594                           ;ADC.c: 7: TRISA = 0xFF;
  1595  00081C  6892               	setf	3986,c	;volatile
  1596                           
  1597                           ;ADC.c: 8: TRISE = 0xFF;
  1598  00081E  6896               	setf	3990,c	;volatile
  1599                           
  1600                           ;ADC.c: 9: TRISB = 0x0F;
  1601  000820  0E0F               	movlw	15
  1602  000822  6E93               	movwf	3987,c	;volatile
  1603                           
  1604                           ;ADC.c: 10: switch(canal)
  1605  000824  D020               	goto	l75
  1606  000826                     
  1607                           ;ADC.c: 13: ADCON1=0x0E;
  1608  000826  0E0E               	movlw	14
  1609  000828  D01C               	goto	L12
  1610  00082A                     l976:
  1611                           
  1612                           ;ADC.c: 14: ADCON0=canal<<2;
  1613  00082A  4401               	rlncf	ADC_CONFIG@canal,w,c
  1614  00082C  46E8               	rlncf	wreg,f,c
  1615  00082E  0BFC               	andlw	252
  1616  000830  6EC2               	movwf	4034,c	;volatile
  1617                           
  1618                           ;ADC.c: 15: break;
  1619  000832  D041               	goto	l77
  1620  000834                     
  1621                           ;ADC.c: 17: ADCON1=0x0D;
  1622  000834  0E0D               	movlw	13
  1623  000836  D015               	goto	L12
  1624  000838                     
  1625                           ;ADC.c: 21: ADCON1=0x0C;
  1626  000838  0E0C               	movlw	12
  1627  00083A  D013               	goto	L12
  1628  00083C                     
  1629                           ;ADC.c: 25: ADCON1=0x0B;
  1630  00083C  0E0B               	movlw	11
  1631  00083E  D011               	goto	L12
  1632  000840                     
  1633                           ;ADC.c: 29: ADCON1=0x0A;
  1634  000840  0E0A               	movlw	10
  1635  000842  D00F               	goto	L12
  1636  000844                     
  1637                           ;ADC.c: 33: ADCON1=0x09;
  1638  000844  0E09               	movlw	9
  1639  000846  D00D               	goto	L12
  1640  000848                     
  1641                           ;ADC.c: 37: ADCON1=0x08;
  1642  000848  0E08               	movlw	8
  1643  00084A  D00B               	goto	L12
  1644  00084C                     
  1645                           ;ADC.c: 41: ADCON1=0x07;
  1646  00084C  0E07               	movlw	7
  1647  00084E  D009               	goto	L12
  1648  000850                     
  1649                           ;ADC.c: 45: ADCON1=0x06;
  1650  000850  0E06               	movlw	6
  1651  000852  D007               	goto	L12
  1652  000854                     
  1653                           ;ADC.c: 49: ADCON1=0x05;
  1654  000854  0E05               	movlw	5
  1655  000856  D005               	goto	L12
  1656  000858                     
  1657                           ;ADC.c: 53: ADCON1=0x04;
  1658  000858  0E04               	movlw	4
  1659  00085A  D003               	goto	L12
  1660  00085C                     
  1661                           ;ADC.c: 57: ADCON1=0x03;
  1662  00085C  0E03               	movlw	3
  1663  00085E  D001               	goto	L12
  1664  000860                     
  1665                           ;ADC.c: 61: ADCON1=0x02;
  1666  000860  0E02               	movlw	2
  1667  000862                     L12:
  1668  000862  6EC1               	movwf	4033,c	;volatile
  1669  000864  D7E2               	goto	l976
  1670  000866                     l75:
  1671  000866  5001               	movf	ADC_CONFIG@canal,w,c
  1672                           
  1673                           ; Switch size 1, requested type "space"
  1674                           ; Number of cases is 13, Range of values is 0 to 12
  1675                           ; switch strategies available:
  1676                           ; Name         Instructions Cycles
  1677                           ; simple_byte           40    21 (average)
  1678                           ;	Chosen strategy is simple_byte
  1679  000868  0A00               	xorlw	0	; case 0
  1680  00086A  B4D8               	btfsc	status,2,c
  1681  00086C  D7DC               	goto	l76
  1682  00086E  0A01               	xorlw	1	; case 1
  1683  000870  B4D8               	btfsc	status,2,c
  1684  000872  D7E0               	goto	l78
  1685  000874  0A03               	xorlw	3	; case 2
  1686  000876  B4D8               	btfsc	status,2,c
  1687  000878  D7DF               	goto	l79
  1688  00087A  0A01               	xorlw	1	; case 3
  1689  00087C  B4D8               	btfsc	status,2,c
  1690  00087E  D7DE               	goto	l80
  1691  000880  0A07               	xorlw	7	; case 4
  1692  000882  B4D8               	btfsc	status,2,c
  1693  000884  D7DD               	goto	l81
  1694  000886  0A01               	xorlw	1	; case 5
  1695  000888  B4D8               	btfsc	status,2,c
  1696  00088A  D7DC               	goto	l82
  1697  00088C  0A03               	xorlw	3	; case 6
  1698  00088E  B4D8               	btfsc	status,2,c
  1699  000890  D7DB               	goto	l83
  1700  000892  0A01               	xorlw	1	; case 7
  1701  000894  B4D8               	btfsc	status,2,c
  1702  000896  D7DA               	goto	l84
  1703  000898  0A0F               	xorlw	15	; case 8
  1704  00089A  B4D8               	btfsc	status,2,c
  1705  00089C  D7D9               	goto	l85
  1706  00089E  0A01               	xorlw	1	; case 9
  1707  0008A0  B4D8               	btfsc	status,2,c
  1708  0008A2  D7D8               	goto	l86
  1709  0008A4  0A03               	xorlw	3	; case 10
  1710  0008A6  B4D8               	btfsc	status,2,c
  1711  0008A8  D7D7               	goto	l87
  1712  0008AA  0A01               	xorlw	1	; case 11
  1713  0008AC  B4D8               	btfsc	status,2,c
  1714  0008AE  D7D6               	goto	l88
  1715  0008B0  0A07               	xorlw	7	; case 12
  1716  0008B2  B4D8               	btfsc	status,2,c
  1717  0008B4  D7D5               	goto	l89
  1718  0008B6                     l77:
  1719                           
  1720                           ;ADC.c: 65: ADCON2 = 0x91;
  1721  0008B6  0E91               	movlw	145
  1722  0008B8  6EC0               	movwf	4032,c	;volatile
  1723                           
  1724                           ;ADC.c: 66: ADCON0bits.ADON = 1;
  1725  0008BA  80C2               	bsf	4034,0,c	;volatile
  1726  0008BC  0012               	return		;funcret
  1727  0008BE                     __end_of_ADC_CONFIG:
  1728                           	opt stack 0
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           prodh	equ	0xFF4
  1734                           prodl	equ	0xFF3
  1735                           wreg	equ	0xFE8
  1736                           status	equ	0xFD8
  1737                           tblptru	equ	0xFF8
  1738                           tblptrh	equ	0xFF7
  1739                           tblptrl	equ	0xFF6
  1740                           tablat	equ	0xFF5
  1741                           prodh	equ	0xFF4
  1742                           prodl	equ	0xFF3
  1743                           wreg	equ	0xFE8
  1744                           status	equ	0xFD8
  1745                           
  1746                           	psect	rparam
  1747  0000                     tblptru	equ	0xFF8
  1748                           tblptrh	equ	0xFF7
  1749                           tblptrl	equ	0xFF6
  1750                           tablat	equ	0xFF5
  1751                           prodh	equ	0xFF4
  1752                           prodl	equ	0xFF3
  1753                           wreg	equ	0xFE8
  1754                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      9      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[7]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _conviertemon->___awdiv
    _arranca_LCD->_CURSOR_ONOFF
    _arranca_LCD->_LCD_CONFIG
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _POS_CURSOR->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2283
                         _ADC_CONFIG
                      _ADC_CONVERTIR
                        _CURSOR_HOME
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _POS_CURSOR
                        _arranca_LCD
                       _conviertemon
 ---------------------------------------------------------------------------------
 (1) _conviertemon                                         0     0      0     604
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _arranca_LCD                                          1     1      0     405
                                              4 COMRAM     1     1      0
                         _BORRAR_LCD
                       _CURSOR_ONOFF
                         _LCD_CONFIG
 ---------------------------------------------------------------------------------
 (2) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (2) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     284
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     515
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (3) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (4) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_CONVERTIR                                        5     3      2      25
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_CONFIG                                           1     1      0     210
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CONFIG
   _ADC_CONVERTIR
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _arranca_LCD
     _BORRAR_LCD
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _CURSOR_ONOFF
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
     _LCD_CONFIG
       _ENVIA_LCD_CMD
         _ENVIA_NIBBLE
         _LEER_LCD
       _ENVIA_NIBBLE
   _conviertemon
     ___awdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      9       F       1       15.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       F      20        0.0%
DATA                 0      0       F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 25 20:21:16 2018

     __size_of_ADC_CONFIG 00A4           ADC_CONFIG@canal 0001                        l45 094E  
                      l80 083C                        l81 0840                        l82 0844  
                      l75 0866                        l83 0848                        l84 084C  
                      l76 0826                        l77 08B6                        l85 0850  
                      l86 0854                        l78 0834                        l94 0B54  
                      l87 0858                        l79 0838                        l88 085C  
                      l89 0860              ___awdiv@sign 0006             ENVIA_CHAR@aux 0003  
                     l141 0AE0                       l117 0B90                       l142 0ABA  
                     l136 0BD2                       l163 0A36                       l341 0900  
                     l342 08F8                       l345 0920                       l346 092A  
                     l338 08D2                       l347 0938                       l339 08E2  
                     l824 0A58                       l976 082A                       u230 0904  
                     u307 0BB0                       u317 09BA                       u407 0A48  
                     u327 09C8                       u417 0A52                       u337 09D8  
                     u427 0BF2                       u347 0AF8                       u357 0B2C  
                     u367 0A16                       u377 0A24                       u387 0A2E  
                     u397 0A3A              __CFG_BOR$OFF 000000    __size_of_ADC_CONVERTIR 002C  
             LEER_LCD@aux 0001                       wreg 000FE8              ?_CURSOR_HOME 0001  
          ??_ENVIA_NIBBLE 0001              __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0002  
            __CFG_WDT$OFF 000000                      STR_1 0801                      STR_2 0811  
                    _LATD 000F8C              __CFG_PWRT$ON 000000                      _main 0942  
                    prodh 000FF4                      prodl 000FF3                      start 0000  
           ?_CURSOR_ONOFF 0001             __CFG_MCLRE$ON 000000              ___param_bank 000000  
         ??_ENVIA_LCD_CMD 0002             ?_conviertemon 0001          __end_of_LEER_LCD 0A6A  
     __size_of_BORRAR_LCD 0008             __CFG_PLLDIV$1 000000            __CFG_CCP2MX$ON 000000  
                   ?_main 0001           __end_of___awdiv 0942           ___awdiv@divisor 0003  
         ___awdiv@counter 0005                     _PORTD 000F83       __size_of_LCD_CONFIG 0060  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISD 000F95  
                   _TRISE 000F96       __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004  
                   tablat 000FF5                     status 000FD8            ??_CURSOR_ONOFF 0004  
           _ADC_CONVERTIR 0B52           __initialization 0BFC            ??_conviertemon 0009  
            __end_of_main 09AA           _ESCRIBE_MENSAJE 0AB0                    ??_main 000A  
           __activetblptr 000002          ADC_CONVERTIR@num 0004              ??_ADC_CONFIG 0001  
                  _ADCON0 000FC2                    _ADCON1 000FC1                    _ADCON2 000FC0  
                  _ADRESH 000FC4                    _ADRESL 000FC3          ___awdiv@dividend 0001  
          ?_ADC_CONVERTIR 0001      __size_of_arranca_LCD 0022        __end_of_ADC_CONFIG 08BE  
               ??___awdiv 0005      __end_of_ENVIA_NIBBLE 0BFC                    _digdec 000E  
                  _digcen 000F                    _diguni 000D       __size_of_POS_CURSOR 0024  
        ___awdiv@quotient 0007              __mediumconst 0000                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8              ??_BORRAR_LCD 0004  
    __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0001                __accesstop 0060  
 __end_of__initialization 0C08           __CFG_PBADEN$OFF 000000           __CFG_FOSC$XT_XT 000000  
            ??_LCD_CONFIG 0004             ___rparam_used 000001              ??_ENVIA_CHAR 0002  
 __end_of_ESCRIBE_MENSAJE 0AEA            __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0C1A  
        ENVIA_LCD_CMD@aux 0003      __end_of_CURSOR_ONOFF 0BE0        __end_of_LCD_CONFIG 0A0A  
      __end_of_ENVIA_CHAR 0B1E      __end_of_conviertemon 0AB0           ??_ADC_CONVERTIR 0003  
              ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001              ??_POS_CURSOR 0005  
   __size_of_ENVIA_NIBBLE 001C                   __Hparam 0000                   __Lparam 0000  
        ?_ESCRIBE_MENSAJE 0004                   ___awdiv 08BE              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0B52                   __pcinit 0BFC        __end_of_POS_CURSOR 0BA2  
                 __ramtop 0800                   __ptext0 0942                   __ptext1 0A6A  
                 __ptext2 08BE                   __ptext3 0BA2                   __ptext4 09AA  
                 __ptext5 0BC4                   __ptext6 0C12                   __ptext7 0B7E  
                 __ptext8 0AB0                   __ptext9 0AEA              _ENVIA_NIBBLE 0BE0  
    end_of_initialization 0C08             __Lmediumconst 0000     __size_of_CURSOR_ONOFF 001C  
   __size_of_conviertemon 0046             ??_arranca_LCD 0005         __size_of_LEER_LCD 0060  
            _CURSOR_ONOFF 0BC4        CURSOR_ONOFF@estado 0004              _conviertemon 0A6A  
           ??_CURSOR_HOME 0004       start_initialization 0BFC         ENVIA_LCD_CMD@dato 0002  
     __end_of_arranca_LCD 0BC4               __pbssCOMRAM 000A       __end_of_CURSOR_HOME 0C22  
   __end_of_ADC_CONVERTIR 0B7E                  ?___awdiv 0001               __smallconst 0800  
                _LEER_LCD 0A0A                  _LATDbits 000F8C               _arranca_LCD 0BA2  
               _resultado 000A          ESCRIBE_MENSAJE@i 0009            POS_CURSOR@fila 0005  
__size_of_ESCRIBE_MENSAJE 003A                _ADCON0bits 000FC2                _ADCON2bits 000FC0  
             _CURSOR_HOME 0C1A                _ADC_CONFIG 081A    __size_of_ENVIA_LCD_CMD 0034  
                __Hrparam 0000                  __Lrparam 0000          __size_of___awdiv 0084  
                __ptext10 0C1A                  __ptext11 0B1E                  __ptext12 0A0A  
                __ptext13 0BE0                  __ptext14 0B52                  __ptext15 081A  
              _BORRAR_LCD 0C12             __size_of_main 0068                _LCD_CONFIG 09AA  
              _ENVIA_CHAR 0AEA                  _temporal 000C             _ENVIA_LCD_CMD 0B1E  
   __CFG_CPUDIV$OSC1_PLL2 000000               ?_ADC_CONFIG 0001         ??_ESCRIBE_MENSAJE 0007  
   ESCRIBE_MENSAJE@cadena 0004            ?_ENVIA_LCD_CMD 0001               ?_BORRAR_LCD 0001  
           ?_ENVIA_NIBBLE 0001                _POS_CURSOR 0B7E               ?_LCD_CONFIG 0001  
      ESCRIBE_MENSAJE@tam 0006               ?_ENVIA_CHAR 0001              ?_arranca_LCD 0001  
       POS_CURSOR@columna 0004  
