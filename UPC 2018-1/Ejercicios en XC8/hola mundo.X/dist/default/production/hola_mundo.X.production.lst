

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Feb 13 16:26:32 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25  0000                     
    26                           ; Version 1.41
    27                           ; Generated 25/01/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     _PORTD	set	3971
    61  0000                     _LATD	set	3980
    62  0000                     _LATDbits	set	3980
    63  0000                     _ADRESH	set	4036
    64  0000                     _ADCON0bits	set	4034
    65  0000                     _CVRCON	set	4021
    66  0000                     _ADCON0	set	4034
    67  0000                     _ADCON1	set	4033
    68  0000                     _ADCON2	set	4032
    69  0000                     _TRISD	set	3989
    70  0000                     _OSCCONbits	set	4051
    71                           
    72                           	psect	smallconst
    73  000800                     __psmallconst:
    74                           	opt stack 0
    75  000800  00                 	db	0
    76  000801                     STR_1:
    77  000801  54                 	db	84	;'T'
    78  000802  45                 	db	69	;'E'
    79  000803  52                 	db	82	;'R'
    80  000804  4D                 	db	77	;'M'
    81  000805  4F                 	db	79	;'O'
    82  000806  54                 	db	84	;'T'
    83  000807  52                 	db	82	;'R'
    84  000808  4F                 	db	79	;'O'
    85  000809  4E                 	db	78	;'N'
    86  00080A  20                 	db	32
    87  00080B  55                 	db	85	;'U'
    88  00080C  50                 	db	80	;'P'
    89  00080D  43                 	db	67	;'C'
    90  00080E  00                 	db	0
    91  00080F                     STR_2:
    92  00080F  50                 	db	80	;'P'
    93  000810  4F                 	db	79	;'O'
    94  000811  54                 	db	84	;'T'
    95  000812  45                 	db	69	;'E'
    96  000813  4E                 	db	78	;'N'
    97  000814  43                 	db	67	;'C'
    98  000815  3A                 	db	58	;':'
    99  000816  00                 	db	0
   100                           
   101                           ; #config settings
   102  000817  00                 	db	0	; dummy byte at the end
   103  0000                     
   104                           	psect	cinit
   105  000C04                     __pcinit:
   106                           	opt stack 0
   107  000C04                     start_initialization:
   108                           	opt stack 0
   109  000C04                     __initialization:
   110                           	opt stack 0
   111                           
   112                           ; Clear objects allocated to COMRAM (10 bytes)
   113  000C04  EE00  F00C         	lfsr	0,__pbssCOMRAM
   114  000C08  0E0A               	movlw	10
   115  000C0A                     clear_0:
   116  000C0A  6AEE               	clrf	postinc0,c
   117  000C0C  06E8               	decf	wreg,f,c
   118  000C0E  E1FD               	bnz	clear_0
   119  000C10                     end_of_initialization:
   120                           	opt stack 0
   121  000C10                     __end_of__initialization:
   122                           	opt stack 0
   123  000C10  0E00               	movlw	low (__Lsmallconst shr (0+16))
   124  000C12  6EF8               	movwf	tblptru,c
   125  000C14  0E08               	movlw	high __Lsmallconst
   126  000C16  6EF7               	movwf	tblptrh,c
   127  000C18  0100               	movlb	0
   128  000C1A  EF0C  F004         	goto	_main	;jump to C main() function
   129                           tblptru	equ	0xFF8
   130                           tblptrh	equ	0xFF7
   131                           postinc0	equ	0xFEE
   132                           wreg	equ	0xFE8
   133                           
   134                           	psect	bssCOMRAM
   135  00000C                     __pbssCOMRAM:
   136                           	opt stack 0
   137  00000C                     _resadc:
   138                           	opt stack 0
   139  00000C                     	ds	2
   140  00000E                     _temporal:
   141                           	opt stack 0
   142  00000E                     	ds	2
   143  000010                     _digcen:
   144                           	opt stack 0
   145  000010                     	ds	2
   146  000012                     _digdec:
   147                           	opt stack 0
   148  000012                     	ds	2
   149  000014                     _diguni:
   150                           	opt stack 0
   151  000014                     	ds	2
   152                           tblptru	equ	0xFF8
   153                           tblptrh	equ	0xFF7
   154                           postinc0	equ	0xFEE
   155                           wreg	equ	0xFE8
   156                           
   157                           	psect	cstackCOMRAM
   158  000001                     __pcstackCOMRAM:
   159                           	opt stack 0
   160  000001                     ?___wmul:
   161                           	opt stack 0
   162  000001                     ?___awdiv:
   163                           	opt stack 0
   164  000001                     ENVIA_NIBBLE@dato:
   165                           	opt stack 0
   166  000001                     LEER_LCD@aux:
   167                           	opt stack 0
   168  000001                     ___wmul@multiplier:
   169                           	opt stack 0
   170  000001                     ___awdiv@dividend:
   171                           	opt stack 0
   172                           
   173                           ; 2 bytes @ 0x0
   174  000001                     	ds	1
   175  000002                     ENVIA_CHAR@dato:
   176                           	opt stack 0
   177  000002                     ENVIA_LCD_CMD@dato:
   178                           	opt stack 0
   179                           
   180                           ; 1 bytes @ 0x1
   181  000002                     	ds	1
   182  000003                     ENVIA_CHAR@aux:
   183                           	opt stack 0
   184  000003                     ENVIA_LCD_CMD@aux:
   185                           	opt stack 0
   186  000003                     ___wmul@multiplicand:
   187                           	opt stack 0
   188  000003                     ___awdiv@divisor:
   189                           	opt stack 0
   190                           
   191                           ; 2 bytes @ 0x2
   192  000003                     	ds	1
   193  000004                     ??_LCD_CONFIG:
   194  000004                     POS_CURSOR@columna:
   195                           	opt stack 0
   196  000004                     CURSOR_ONOFF@estado:
   197                           	opt stack 0
   198  000004                     ESCRIBE_MENSAJE@cadena:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x3
   202  000004                     	ds	1
   203  000005                     POS_CURSOR@fila:
   204                           	opt stack 0
   205  000005                     ___awdiv@counter:
   206                           	opt stack 0
   207  000005                     ___wmul@product:
   208                           	opt stack 0
   209                           
   210                           ; 2 bytes @ 0x4
   211  000005                     	ds	1
   212  000006                     ESCRIBE_MENSAJE@tam:
   213                           	opt stack 0
   214  000006                     ___awdiv@sign:
   215                           	opt stack 0
   216                           
   217                           ; 1 bytes @ 0x5
   218  000006                     	ds	1
   219  000007                     ??_ESCRIBE_MENSAJE:
   220  000007                     ___awdiv@quotient:
   221                           	opt stack 0
   222                           
   223                           ; 2 bytes @ 0x6
   224  000007                     	ds	2
   225  000009                     ESCRIBE_MENSAJE@i:
   226                           	opt stack 0
   227                           
   228                           ; 1 bytes @ 0x8
   229  000009                     	ds	1
   230  00000A                     ??_main:
   231                           
   232                           ; 1 bytes @ 0x9
   233  00000A                     	ds	2
   234                           tblptru	equ	0xFF8
   235                           tblptrh	equ	0xFF7
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239 ;;
   240 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   241 ;;
   242 ;; *************** function _main *****************
   243 ;; Defined at:
   244 ;;		line 30 in file "maincode.c"
   245 ;; Parameters:    Size  Location     Type
   246 ;;		None
   247 ;; Auto vars:     Size  Location     Type
   248 ;;		None
   249 ;; Return value:  Size  Location     Type
   250 ;;                  1    wreg      void 
   251 ;; Registers used:
   252 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   253 ;; Tracked objects:
   254 ;;		On entry : 0/0
   255 ;;		On exit  : 0/0
   256 ;;		Unchanged: 0/0
   257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   258 ;;      Params:         0       0       0       0       0       0       0       0       0
   259 ;;      Locals:         0       0       0       0       0       0       0       0       0
   260 ;;      Temps:          2       0       0       0       0       0       0       0       0
   261 ;;      Totals:         2       0       0       0       0       0       0       0       0
   262 ;;Total ram usage:        2 bytes
   263 ;; Hardware stack levels required when called:    3
   264 ;; This function calls:
   265 ;;		_BORRAR_LCD
   266 ;;		_CURSOR_HOME
   267 ;;		_CURSOR_ONOFF
   268 ;;		_ENVIA_CHAR
   269 ;;		_ESCRIBE_MENSAJE
   270 ;;		_LCD_CONFIG
   271 ;;		_POS_CURSOR
   272 ;;		___awdiv
   273 ;;		_conviertemon
   274 ;; This function is called by:
   275 ;;		Startup code after reset
   276 ;; This function uses a non-reentrant model
   277 ;;
   278                           
   279                           	psect	text0
   280  000818                     __ptext0:
   281                           	opt stack 0
   282  000818                     _main:
   283                           	opt stack 28
   284                           
   285                           ;maincode.c: 31: OSCCONbits.IRCF0 = 1;
   286                           
   287                           ;incstack = 0
   288  000818  88D3               	bsf	4051,4,c	;volatile
   289                           
   290                           ;maincode.c: 32: OSCCONbits.IRCF1 = 1;
   291  00081A  8AD3               	bsf	4051,5,c	;volatile
   292                           
   293                           ;maincode.c: 33: OSCCONbits.IRCF2 = 1;
   294  00081C  8CD3               	bsf	4051,6,c	;volatile
   295                           
   296                           ;maincode.c: 34: TRISD = 0x00;
   297  00081E  0E00               	movlw	0
   298  000820  6E95               	movwf	3989,c	;volatile
   299                           
   300                           ;maincode.c: 36: ADCON2 = 0x24;
   301  000822  0E24               	movlw	36
   302  000824  6EC0               	movwf	4032,c	;volatile
   303                           
   304                           ;maincode.c: 37: ADCON1 = 0x1E;
   305  000826  0E1E               	movlw	30
   306  000828  6EC1               	movwf	4033,c	;volatile
   307                           
   308                           ;maincode.c: 38: ADCON0 = 0x01;
   309  00082A  0E01               	movlw	1
   310  00082C  6EC2               	movwf	4034,c	;volatile
   311                           
   312                           ;maincode.c: 39: CVRCON = 0xC0;
   313  00082E  0EC0               	movlw	192
   314  000830  6EB5               	movwf	4021,c	;volatile
   315                           
   316                           ;maincode.c: 41: LCD_CONFIG();
   317  000832  EC40  F005         	call	_LCD_CONFIG	;wreg free
   318                           
   319                           ;maincode.c: 42: _delay((unsigned long)((10)*(8000000UL/4000.0)));
   320  000836  0E1A               	movlw	26
   321  000838  6E0A               	movwf	??_main& (0+255),c
   322  00083A  0EF8               	movlw	248
   323  00083C                     u307:
   324  00083C  2EE8               	decfsz	wreg,f,c
   325  00083E  D7FE               	bra	u307
   326  000840  2E0A               	decfsz	??_main& (0+255),f,c
   327  000842  D7FC               	bra	u307
   328  000844  D000               	nop2	
   329                           
   330                           ;maincode.c: 43: BORRAR_LCD();
   331  000846  EC13  F006         	call	_BORRAR_LCD	;wreg free
   332                           
   333                           ;maincode.c: 44: CURSOR_ONOFF(1);
   334  00084A  0E01               	movlw	1
   335  00084C  ECE6  F005         	call	_CURSOR_ONOFF
   336                           
   337                           ;maincode.c: 45: CURSOR_HOME();
   338  000850  EC0F  F006         	call	_CURSOR_HOME	;wreg free
   339                           
   340                           ;maincode.c: 46: ESCRIBE_MENSAJE("TERMOTRON UPC",13);
   341  000854  0E01               	movlw	low STR_1
   342  000856  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   343  000858  0E08               	movlw	high STR_1
   344  00085A  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   345  00085C  0E0D               	movlw	13
   346  00085E  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   347  000860  EC70  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   348                           
   349                           ;maincode.c: 47: POS_CURSOR(2,0);
   350  000864  0E00               	movlw	0
   351  000866  6E04               	movwf	POS_CURSOR@columna,c
   352  000868  0E02               	movlw	2
   353  00086A  ECD4  F005         	call	_POS_CURSOR
   354                           
   355                           ;maincode.c: 48: ESCRIBE_MENSAJE("POTENC:",7);
   356  00086E  0E0F               	movlw	low STR_2
   357  000870  6E04               	movwf	ESCRIBE_MENSAJE@cadena,c
   358  000872  0E08               	movlw	high STR_2
   359  000874  6E05               	movwf	ESCRIBE_MENSAJE@cadena+1,c
   360  000876  0E07               	movlw	7
   361  000878  6E06               	movwf	ESCRIBE_MENSAJE@tam,c
   362  00087A  EC70  F005         	call	_ESCRIBE_MENSAJE	;wreg free
   363  00087E                     l1114:
   364                           
   365                           ;maincode.c: 50: if (ADCON0bits.GODONE == 0){
   366  00087E  B2C2               	btfsc	4034,1,c	;volatile
   367  000880  D004               	goto	l1118
   368                           
   369                           ;maincode.c: 51: resadc = ADRESH;
   370  000882  CFC4 F00C          	movff	4036,_resadc	;volatile
   371  000886  6A0D               	clrf	_resadc+1,c
   372                           
   373                           ;maincode.c: 52: ADCON0bits.GODONE = 1;
   374  000888  82C2               	bsf	4034,1,c	;volatile
   375  00088A                     l1118:
   376                           
   377                           ;maincode.c: 53: }
   378                           ;maincode.c: 54: resadc = resadc /2;
   379  00088A  C00C  F001         	movff	_resadc,___awdiv@dividend
   380  00088E  C00D  F002         	movff	_resadc+1,___awdiv@dividend+1
   381  000892  0E00               	movlw	0
   382  000894  6E04               	movwf	___awdiv@divisor+1,c
   383  000896  0E02               	movlw	2
   384  000898  6E03               	movwf	___awdiv@divisor,c
   385  00089A  ECCC  F004         	call	___awdiv	;wreg free
   386  00089E  C001  F00C         	movff	?___awdiv,_resadc
   387  0008A2  C002  F00D         	movff	?___awdiv+1,_resadc+1
   388                           
   389                           ;maincode.c: 55: conviertemon();
   390  0008A6  EC87  F004         	call	_conviertemon	;wreg free
   391                           
   392                           ;maincode.c: 56: POS_CURSOR(2,8);
   393  0008AA  0E08               	movlw	8
   394  0008AC  6E04               	movwf	POS_CURSOR@columna,c
   395  0008AE  0E02               	movlw	2
   396  0008B0  ECD4  F005         	call	_POS_CURSOR
   397                           
   398                           ;maincode.c: 57: ENVIA_CHAR(digcen+0x30);
   399  0008B4  5010               	movf	_digcen,w,c
   400  0008B6  0F30               	addlw	48
   401  0008B8  EC8D  F005         	call	_ENVIA_CHAR
   402                           
   403                           ;maincode.c: 58: ENVIA_CHAR(digdec+0x30);
   404  0008BC  5012               	movf	_digdec,w,c
   405  0008BE  0F30               	addlw	48
   406  0008C0  EC8D  F005         	call	_ENVIA_CHAR
   407                           
   408                           ;maincode.c: 59: ENVIA_CHAR(diguni+0x30);
   409  0008C4  5014               	movf	_diguni,w,c
   410  0008C6  0F30               	addlw	48
   411  0008C8  EC8D  F005         	call	_ENVIA_CHAR
   412                           
   413                           ;maincode.c: 60: ENVIA_CHAR(0xDF);
   414  0008CC  0EDF               	movlw	223
   415  0008CE  EC8D  F005         	call	_ENVIA_CHAR
   416                           
   417                           ;maincode.c: 61: ENVIA_CHAR(0x43);
   418  0008D2  0E43               	movlw	67
   419  0008D4  EC8D  F005         	call	_ENVIA_CHAR
   420                           
   421                           ;maincode.c: 62: LATDbits.LD3 = 1;
   422  0008D8  868C               	bsf	3980,3,c	;volatile
   423                           
   424                           ;maincode.c: 63: _delay((unsigned long)((100)*(8000000UL/4000.0)));
   425  0008DA  0E02               	movlw	2
   426  0008DC  6E0B               	movwf	(??_main+1)& (0+255),c
   427  0008DE  0E04               	movlw	4
   428  0008E0  6E0A               	movwf	??_main& (0+255),c
   429  0008E2  0EBA               	movlw	186
   430  0008E4                     u317:
   431  0008E4  2EE8               	decfsz	wreg,f,c
   432  0008E6  D7FE               	bra	u317
   433  0008E8  2E0A               	decfsz	??_main& (0+255),f,c
   434  0008EA  D7FC               	bra	u317
   435  0008EC  2E0B               	decfsz	(??_main+1)& (0+255),f,c
   436  0008EE  D7FA               	bra	u317
   437  0008F0  D000               	nop2	
   438                           
   439                           ;maincode.c: 64: LATDbits.LD3 = 0;
   440  0008F2  968C               	bcf	3980,3,c	;volatile
   441                           
   442                           ;maincode.c: 65: _delay((unsigned long)((100)*(8000000UL/4000.0)));
   443  0008F4  0E02               	movlw	2
   444  0008F6  6E0B               	movwf	(??_main+1)& (0+255),c
   445  0008F8  0E04               	movlw	4
   446  0008FA  6E0A               	movwf	??_main& (0+255),c
   447  0008FC  0EBA               	movlw	186
   448  0008FE                     u327:
   449  0008FE  2EE8               	decfsz	wreg,f,c
   450  000900  D7FE               	bra	u327
   451  000902  2E0A               	decfsz	??_main& (0+255),f,c
   452  000904  D7FC               	bra	u327
   453  000906  2E0B               	decfsz	(??_main+1)& (0+255),f,c
   454  000908  D7FA               	bra	u327
   455  00090A  D000               	nop2	
   456  00090C  D7B8               	goto	l1114
   457  00090E                     __end_of_main:
   458                           	opt stack 0
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           
   464 ;; *************** function _conviertemon *****************
   465 ;; Defined at:
   466 ;;		line 70 in file "maincode.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;		None
   471 ;; Return value:  Size  Location     Type
   472 ;;                  2   32[None  ] int 
   473 ;; Registers used:
   474 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   480 ;;      Params:         0       0       0       0       0       0       0       0       0
   481 ;;      Locals:         0       0       0       0       0       0       0       0       0
   482 ;;      Temps:          0       0       0       0       0       0       0       0       0
   483 ;;      Totals:         0       0       0       0       0       0       0       0       0
   484 ;;Total ram usage:        0 bytes
   485 ;; Hardware stack levels used:    1
   486 ;; Hardware stack levels required when called:    1
   487 ;; This function calls:
   488 ;;		___awdiv
   489 ;;		___wmul
   490 ;; This function is called by:
   491 ;;		_main
   492 ;; This function uses a non-reentrant model
   493 ;;
   494                           
   495                           	psect	text1
   496  00090E                     __ptext1:
   497                           	opt stack 0
   498  00090E                     _conviertemon:
   499                           	opt stack 29
   500                           
   501                           ;maincode.c: 71: digcen = resadc / 100;
   502                           
   503                           ;incstack = 0
   504  00090E  C00C  F001         	movff	_resadc,___awdiv@dividend
   505  000912  C00D  F002         	movff	_resadc+1,___awdiv@dividend+1
   506  000916  0E00               	movlw	0
   507  000918  6E04               	movwf	___awdiv@divisor+1,c
   508  00091A  0E64               	movlw	100
   509  00091C  6E03               	movwf	___awdiv@divisor,c
   510  00091E  ECCC  F004         	call	___awdiv	;wreg free
   511  000922  C001  F010         	movff	?___awdiv,_digcen
   512  000926  C002  F011         	movff	?___awdiv+1,_digcen+1
   513                           
   514                           ;maincode.c: 72: temporal = resadc - (digcen * 100);
   515  00092A  C010  F001         	movff	_digcen,___wmul@multiplier
   516  00092E  C011  F002         	movff	_digcen+1,___wmul@multiplier+1
   517  000932  0E00               	movlw	0
   518  000934  6E04               	movwf	___wmul@multiplicand+1,c
   519  000936  0E64               	movlw	100
   520  000938  6E03               	movwf	___wmul@multiplicand,c
   521  00093A  ECC1  F005         	call	___wmul	;wreg free
   522  00093E  1E01               	comf	?___wmul,f,c
   523  000940  1E02               	comf	?___wmul+1,f,c
   524  000942  4A01               	infsnz	?___wmul,f,c
   525  000944  2A02               	incf	?___wmul+1,f,c
   526  000946  500C               	movf	_resadc,w,c
   527  000948  2401               	addwf	?___wmul,w,c
   528  00094A  6E0E               	movwf	_temporal,c
   529  00094C  500D               	movf	_resadc+1,w,c
   530  00094E  2002               	addwfc	?___wmul+1,w,c
   531  000950  6E0F               	movwf	_temporal+1,c
   532                           
   533                           ;maincode.c: 73: digdec = temporal / 10;
   534  000952  C00E  F001         	movff	_temporal,___awdiv@dividend
   535  000956  C00F  F002         	movff	_temporal+1,___awdiv@dividend+1
   536  00095A  0E00               	movlw	0
   537  00095C  6E04               	movwf	___awdiv@divisor+1,c
   538  00095E  0E0A               	movlw	10
   539  000960  6E03               	movwf	___awdiv@divisor,c
   540  000962  ECCC  F004         	call	___awdiv	;wreg free
   541  000966  C001  F012         	movff	?___awdiv,_digdec
   542  00096A  C002  F013         	movff	?___awdiv+1,_digdec+1
   543                           
   544                           ;maincode.c: 74: diguni = temporal - (digdec * 10);
   545  00096E  C012  F001         	movff	_digdec,___wmul@multiplier
   546  000972  C013  F002         	movff	_digdec+1,___wmul@multiplier+1
   547  000976  0E00               	movlw	0
   548  000978  6E04               	movwf	___wmul@multiplicand+1,c
   549  00097A  0E0A               	movlw	10
   550  00097C  6E03               	movwf	___wmul@multiplicand,c
   551  00097E  ECC1  F005         	call	___wmul	;wreg free
   552  000982  1E01               	comf	?___wmul,f,c
   553  000984  1E02               	comf	?___wmul+1,f,c
   554  000986  4A01               	infsnz	?___wmul,f,c
   555  000988  2A02               	incf	?___wmul+1,f,c
   556  00098A  500E               	movf	_temporal,w,c
   557  00098C  2401               	addwf	?___wmul,w,c
   558  00098E  6E14               	movwf	_diguni,c
   559  000990  500F               	movf	_temporal+1,w,c
   560  000992  2002               	addwfc	?___wmul+1,w,c
   561  000994  6E15               	movwf	_diguni+1,c
   562  000996  0012               	return		;funcret
   563  000998                     __end_of_conviertemon:
   564                           	opt stack 0
   565                           tblptru	equ	0xFF8
   566                           tblptrh	equ	0xFF7
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           
   570 ;; *************** function ___wmul *****************
   571 ;; Defined at:
   572 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
   573 ;; Parameters:    Size  Location     Type
   574 ;;  multiplier      2    0[COMRAM] unsigned int 
   575 ;;  multiplicand    2    2[COMRAM] unsigned int 
   576 ;; Auto vars:     Size  Location     Type
   577 ;;  product         2    4[COMRAM] unsigned int 
   578 ;; Return value:  Size  Location     Type
   579 ;;                  2    0[COMRAM] unsigned int 
   580 ;; Registers used:
   581 ;;		wreg, status,2, status,0, prodl, prodh
   582 ;; Tracked objects:
   583 ;;		On entry : 0/0
   584 ;;		On exit  : 0/0
   585 ;;		Unchanged: 0/0
   586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   587 ;;      Params:         4       0       0       0       0       0       0       0       0
   588 ;;      Locals:         2       0       0       0       0       0       0       0       0
   589 ;;      Temps:          0       0       0       0       0       0       0       0       0
   590 ;;      Totals:         6       0       0       0       0       0       0       0       0
   591 ;;Total ram usage:        6 bytes
   592 ;; Hardware stack levels used:    1
   593 ;; This function calls:
   594 ;;		Nothing
   595 ;; This function is called by:
   596 ;;		_conviertemon
   597 ;; This function uses a non-reentrant model
   598 ;;
   599                           
   600                           	psect	text2
   601  000B82                     __ptext2:
   602                           	opt stack 0
   603  000B82                     ___wmul:
   604                           	opt stack 29
   605                           
   606                           ;incstack = 0
   607  000B82  5001               	movf	___wmul@multiplier,w,c
   608  000B84  0203               	mulwf	___wmul@multiplicand,c
   609  000B86  CFF3 F005          	movff	prodl,___wmul@product
   610  000B8A  CFF4 F006          	movff	prodh,___wmul@product+1
   611  000B8E  5001               	movf	___wmul@multiplier,w,c
   612  000B90  0204               	mulwf	___wmul@multiplicand+1,c
   613  000B92  50F3               	movf	prodl,w,c
   614  000B94  2606               	addwf	___wmul@product+1,f,c
   615  000B96  5002               	movf	___wmul@multiplier+1,w,c
   616  000B98  0203               	mulwf	___wmul@multiplicand,c
   617  000B9A  50F3               	movf	prodl,w,c
   618  000B9C  2606               	addwf	___wmul@product+1,f,c
   619  000B9E  C005  F001         	movff	___wmul@product,?___wmul
   620  000BA2  C006  F002         	movff	___wmul@product+1,?___wmul+1
   621  000BA6  0012               	return	
   622  000BA8                     __end_of___wmul:
   623                           	opt stack 0
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           prodh	equ	0xFF4
   627                           prodl	equ	0xFF3
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           
   631 ;; *************** function ___awdiv *****************
   632 ;; Defined at:
   633 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
   634 ;; Parameters:    Size  Location     Type
   635 ;;  dividend        2    0[COMRAM] int 
   636 ;;  divisor         2    2[COMRAM] int 
   637 ;; Auto vars:     Size  Location     Type
   638 ;;  quotient        2    6[COMRAM] int 
   639 ;;  sign            1    5[COMRAM] unsigned char 
   640 ;;  counter         1    4[COMRAM] unsigned char 
   641 ;; Return value:  Size  Location     Type
   642 ;;                  2    0[COMRAM] int 
   643 ;; Registers used:
   644 ;;		wreg, status,2, status,0
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   650 ;;      Params:         4       0       0       0       0       0       0       0       0
   651 ;;      Locals:         4       0       0       0       0       0       0       0       0
   652 ;;      Temps:          0       0       0       0       0       0       0       0       0
   653 ;;      Totals:         8       0       0       0       0       0       0       0       0
   654 ;;Total ram usage:        8 bytes
   655 ;; Hardware stack levels used:    1
   656 ;; This function calls:
   657 ;;		Nothing
   658 ;; This function is called by:
   659 ;;		_main
   660 ;;		_conviertemon
   661 ;; This function uses a non-reentrant model
   662 ;;
   663                           
   664                           	psect	text3
   665  000998                     __ptext3:
   666                           	opt stack 0
   667  000998                     ___awdiv:
   668                           	opt stack 29
   669                           
   670                           ;incstack = 0
   671  000998  0E00               	movlw	0
   672  00099A  6E06               	movwf	___awdiv@sign,c
   673  00099C  AE04               	btfss	___awdiv@divisor+1,7,c
   674  00099E  D006               	goto	l1036
   675  0009A0  6C03               	negf	___awdiv@divisor,c
   676  0009A2  1E04               	comf	___awdiv@divisor+1,f,c
   677  0009A4  B0D8               	btfsc	status,0,c
   678  0009A6  2A04               	incf	___awdiv@divisor+1,f,c
   679  0009A8  0E01               	movlw	1
   680  0009AA  6E06               	movwf	___awdiv@sign,c
   681  0009AC                     l1036:
   682  0009AC  AE02               	btfss	___awdiv@dividend+1,7,c
   683  0009AE  D006               	goto	l1042
   684  0009B0  6C01               	negf	___awdiv@dividend,c
   685  0009B2  1E02               	comf	___awdiv@dividend+1,f,c
   686  0009B4  B0D8               	btfsc	status,0,c
   687  0009B6  2A02               	incf	___awdiv@dividend+1,f,c
   688  0009B8  0E01               	movlw	1
   689  0009BA  1A06               	xorwf	___awdiv@sign,f,c
   690  0009BC                     l1042:
   691  0009BC  0E00               	movlw	0
   692  0009BE  6E08               	movwf	___awdiv@quotient+1,c
   693  0009C0  0E00               	movlw	0
   694  0009C2  6E07               	movwf	___awdiv@quotient,c
   695  0009C4  5003               	movf	___awdiv@divisor,w,c
   696  0009C6  1004               	iorwf	___awdiv@divisor+1,w,c
   697  0009C8  B4D8               	btfsc	status,2,c
   698  0009CA  D01C               	goto	l1064
   699  0009CC  0E01               	movlw	1
   700  0009CE  6E05               	movwf	___awdiv@counter,c
   701  0009D0  D004               	goto	l1050
   702  0009D2                     l1048:
   703  0009D2  90D8               	bcf	status,0,c
   704  0009D4  3603               	rlcf	___awdiv@divisor,f,c
   705  0009D6  3604               	rlcf	___awdiv@divisor+1,f,c
   706  0009D8  2A05               	incf	___awdiv@counter,f,c
   707  0009DA                     l1050:
   708  0009DA  AE04               	btfss	___awdiv@divisor+1,7,c
   709  0009DC  D7FA               	goto	l1048
   710  0009DE                     l1052:
   711  0009DE  90D8               	bcf	status,0,c
   712  0009E0  3607               	rlcf	___awdiv@quotient,f,c
   713  0009E2  3608               	rlcf	___awdiv@quotient+1,f,c
   714  0009E4  5003               	movf	___awdiv@divisor,w,c
   715  0009E6  5C01               	subwf	___awdiv@dividend,w,c
   716  0009E8  5004               	movf	___awdiv@divisor+1,w,c
   717  0009EA  5802               	subwfb	___awdiv@dividend+1,w,c
   718  0009EC  A0D8               	btfss	status,0,c
   719  0009EE  D005               	goto	l1060
   720  0009F0  5003               	movf	___awdiv@divisor,w,c
   721  0009F2  5E01               	subwf	___awdiv@dividend,f,c
   722  0009F4  5004               	movf	___awdiv@divisor+1,w,c
   723  0009F6  5A02               	subwfb	___awdiv@dividend+1,f,c
   724  0009F8  8007               	bsf	___awdiv@quotient,0,c
   725  0009FA                     l1060:
   726  0009FA  90D8               	bcf	status,0,c
   727  0009FC  3204               	rrcf	___awdiv@divisor+1,f,c
   728  0009FE  3203               	rrcf	___awdiv@divisor,f,c
   729  000A00  2E05               	decfsz	___awdiv@counter,f,c
   730  000A02  D7ED               	goto	l1052
   731  000A04                     l1064:
   732  000A04  5006               	movf	___awdiv@sign,w,c
   733  000A06  B4D8               	btfsc	status,2,c
   734  000A08  D004               	goto	l1068
   735  000A0A  6C07               	negf	___awdiv@quotient,c
   736  000A0C  1E08               	comf	___awdiv@quotient+1,f,c
   737  000A0E  B0D8               	btfsc	status,0,c
   738  000A10  2A08               	incf	___awdiv@quotient+1,f,c
   739  000A12                     l1068:
   740  000A12  C007  F001         	movff	___awdiv@quotient,?___awdiv
   741  000A16  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   742  000A1A  0012               	return	
   743  000A1C                     __end_of___awdiv:
   744                           	opt stack 0
   745                           tblptru	equ	0xFF8
   746                           tblptrh	equ	0xFF7
   747                           prodh	equ	0xFF4
   748                           prodl	equ	0xFF3
   749                           postinc0	equ	0xFEE
   750                           wreg	equ	0xFE8
   751                           status	equ	0xFD8
   752                           
   753 ;; *************** function _POS_CURSOR *****************
   754 ;; Defined at:
   755 ;;		line 6 in file "LCD.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;  fila            1    wreg     unsigned char 
   758 ;;  columna         1    3[COMRAM] unsigned char 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  fila            1    4[COMRAM] unsigned char 
   761 ;; Return value:  Size  Location     Type
   762 ;;                  1    wreg      void 
   763 ;; Registers used:
   764 ;;		wreg, status,2, status,0, cstack
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   770 ;;      Params:         1       0       0       0       0       0       0       0       0
   771 ;;      Locals:         1       0       0       0       0       0       0       0       0
   772 ;;      Temps:          0       0       0       0       0       0       0       0       0
   773 ;;      Totals:         2       0       0       0       0       0       0       0       0
   774 ;;Total ram usage:        2 bytes
   775 ;; Hardware stack levels used:    1
   776 ;; Hardware stack levels required when called:    2
   777 ;; This function calls:
   778 ;;		_ENVIA_LCD_CMD
   779 ;; This function is called by:
   780 ;;		_main
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           	psect	text4
   785  000BA8                     __ptext4:
   786                           	opt stack 0
   787  000BA8                     _POS_CURSOR:
   788                           	opt stack 28
   789                           
   790                           ;incstack = 0
   791                           ;POS_CURSOR@fila stored from wreg
   792  000BA8  6E05               	movwf	POS_CURSOR@fila,c
   793                           
   794                           ;LCD.c: 8: if(fila == 1)
   795  000BAA  0405               	decf	POS_CURSOR@fila,w,c
   796  000BAC  A4D8               	btfss	status,2,c
   797  000BAE  D005               	goto	l1084
   798                           
   799                           ;LCD.c: 9: {
   800                           ;LCD.c: 10: ENVIA_LCD_CMD(0x80+columna);
   801  000BB0  5004               	movf	POS_CURSOR@columna,w,c
   802  000BB2  0F80               	addlw	128
   803  000BB4  ECA7  F005         	call	_ENVIA_LCD_CMD
   804                           
   805                           ;LCD.c: 11: }
   806  000BB8  0012               	return	
   807  000BBA                     l1084:
   808                           
   809                           ;LCD.c: 12: else if(fila == 2)
   810  000BBA  0E02               	movlw	2
   811  000BBC  1805               	xorwf	POS_CURSOR@fila,w,c
   812  000BBE  A4D8               	btfss	status,2,c
   813  000BC0  0012               	return	
   814                           
   815                           ;LCD.c: 13: {
   816                           ;LCD.c: 14: ENVIA_LCD_CMD(0xC0+columna);
   817  000BC2  5004               	movf	POS_CURSOR@columna,w,c
   818  000BC4  0FC0               	addlw	192
   819  000BC6  ECA7  F005         	call	_ENVIA_LCD_CMD
   820  000BCA  0012               	return	
   821  000BCC                     __end_of_POS_CURSOR:
   822                           	opt stack 0
   823                           tblptru	equ	0xFF8
   824                           tblptrh	equ	0xFF7
   825                           prodh	equ	0xFF4
   826                           prodl	equ	0xFF3
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           status	equ	0xFD8
   830                           
   831 ;; *************** function _LCD_CONFIG *****************
   832 ;; Defined at:
   833 ;;		line 72 in file "LCD.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;		None
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, status,2, status,0, cstack
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   847 ;;      Params:         0       0       0       0       0       0       0       0       0
   848 ;;      Locals:         0       0       0       0       0       0       0       0       0
   849 ;;      Temps:          1       0       0       0       0       0       0       0       0
   850 ;;      Totals:         1       0       0       0       0       0       0       0       0
   851 ;;Total ram usage:        1 bytes
   852 ;; Hardware stack levels used:    1
   853 ;; Hardware stack levels required when called:    2
   854 ;; This function calls:
   855 ;;		_ENVIA_LCD_CMD
   856 ;;		_ENVIA_NIBBLE
   857 ;; This function is called by:
   858 ;;		_main
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           	psect	text5
   863  000A80                     __ptext5:
   864                           	opt stack 0
   865  000A80                     _LCD_CONFIG:
   866                           	opt stack 28
   867                           
   868                           ;LCD.c: 74: LATDbits.LATD0 = 0;
   869                           
   870                           ;incstack = 0
   871  000A80  908C               	bcf	3980,0,c	;volatile
   872                           
   873                           ;LCD.c: 75: LATDbits.LATD1 = 0;
   874  000A82  928C               	bcf	3980,1,c	;volatile
   875                           
   876                           ;LCD.c: 76: ENVIA_NIBBLE(0x30);
   877  000A84  0E30               	movlw	48
   878  000A86  ECF4  F005         	call	_ENVIA_NIBBLE
   879                           
   880                           ;LCD.c: 77: _delay(24000);
   881  000A8A  0E20               	movlw	32
   882  000A8C  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   883  000A8E  0E2A               	movlw	42
   884  000A90                     u337:
   885  000A90  2EE8               	decfsz	wreg,f,c
   886  000A92  D7FE               	bra	u337
   887  000A94  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   888  000A96  D7FC               	bra	u337
   889                           
   890                           ;LCD.c: 78: _delay(24000);
   891  000A98  0E20               	movlw	32
   892  000A9A  6E04               	movwf	??_LCD_CONFIG& (0+255),c
   893  000A9C  0E2A               	movlw	42
   894  000A9E                     u347:
   895  000A9E  2EE8               	decfsz	wreg,f,c
   896  000AA0  D7FE               	bra	u347
   897  000AA2  2E04               	decfsz	??_LCD_CONFIG& (0+255),f,c
   898  000AA4  D7FC               	bra	u347
   899                           
   900                           ;LCD.c: 81: ENVIA_NIBBLE(0x30);
   901  000AA6  0E30               	movlw	48
   902  000AA8  ECF4  F005         	call	_ENVIA_NIBBLE
   903                           
   904                           ;LCD.c: 83: _delay(1200);
   905  000AAC  0EF0               	movlw	240
   906  000AAE                     u357:
   907  000AAE  D000               	nop2	
   908  000AB0  2EE8               	decfsz	wreg,f,c
   909  000AB2  D7FD               	bra	u357
   910                           
   911                           ;LCD.c: 84: ENVIA_NIBBLE(0x30);
   912  000AB4  0E30               	movlw	48
   913  000AB6  ECF4  F005         	call	_ENVIA_NIBBLE
   914                           
   915                           ;LCD.c: 85: ENVIA_NIBBLE(0x20);
   916  000ABA  0E20               	movlw	32
   917  000ABC  ECF4  F005         	call	_ENVIA_NIBBLE
   918                           
   919                           ;LCD.c: 86: ENVIA_LCD_CMD(0x01);
   920  000AC0  0E01               	movlw	1
   921  000AC2  ECA7  F005         	call	_ENVIA_LCD_CMD
   922                           
   923                           ;LCD.c: 87: ENVIA_LCD_CMD(0x28);
   924  000AC6  0E28               	movlw	40
   925  000AC8  ECA7  F005         	call	_ENVIA_LCD_CMD
   926                           
   927                           ;LCD.c: 88: ENVIA_LCD_CMD(0x0F);
   928  000ACC  0E0F               	movlw	15
   929  000ACE  ECA7  F005         	call	_ENVIA_LCD_CMD
   930                           
   931                           ;LCD.c: 89: ENVIA_LCD_CMD(0x06);
   932  000AD2  0E06               	movlw	6
   933  000AD4  ECA7  F005         	call	_ENVIA_LCD_CMD
   934                           
   935                           ;LCD.c: 90: ENVIA_LCD_CMD(0x01);
   936  000AD8  0E01               	movlw	1
   937  000ADA  ECA7  F005         	call	_ENVIA_LCD_CMD
   938  000ADE  0012               	return		;funcret
   939  000AE0                     __end_of_LCD_CONFIG:
   940                           	opt stack 0
   941                           tblptru	equ	0xFF8
   942                           tblptrh	equ	0xFF7
   943                           prodh	equ	0xFF4
   944                           prodl	equ	0xFF3
   945                           postinc0	equ	0xFEE
   946                           wreg	equ	0xFE8
   947                           status	equ	0xFD8
   948                           
   949 ;; *************** function _ESCRIBE_MENSAJE *****************
   950 ;; Defined at:
   951 ;;		line 41 in file "LCD.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;  cadena          2    3[COMRAM] PTR const unsigned char 
   954 ;;		 -> STR_2(8), STR_1(14), 
   955 ;;  tam             1    5[COMRAM] unsigned char 
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  i               1    8[COMRAM] unsigned char 
   958 ;; Return value:  Size  Location     Type
   959 ;;                  1    wreg      void 
   960 ;; Registers used:
   961 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   967 ;;      Params:         3       0       0       0       0       0       0       0       0
   968 ;;      Locals:         1       0       0       0       0       0       0       0       0
   969 ;;      Temps:          2       0       0       0       0       0       0       0       0
   970 ;;      Totals:         6       0       0       0       0       0       0       0       0
   971 ;;Total ram usage:        6 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; Hardware stack levels required when called:    2
   974 ;; This function calls:
   975 ;;		_ENVIA_CHAR
   976 ;; This function is called by:
   977 ;;		_main
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text6
   982  000AE0                     __ptext6:
   983                           	opt stack 0
   984  000AE0                     _ESCRIBE_MENSAJE:
   985                           	opt stack 28
   986                           
   987                           ;LCD.c: 43: unsigned char i = 0;
   988                           
   989                           ;incstack = 0
   990  000AE0  0E00               	movlw	0
   991  000AE2  6E09               	movwf	ESCRIBE_MENSAJE@i,c
   992                           
   993                           ;LCD.c: 44: for(i = 0; i<tam; i++)
   994  000AE4  0E00               	movlw	0
   995  000AE6  6E09               	movwf	ESCRIBE_MENSAJE@i,c
   996  000AE8  D013               	goto	l1078
   997  000AEA                     l1074:
   998                           
   999                           ;LCD.c: 45: {
  1000                           ;LCD.c: 46: ENVIA_CHAR(cadena[i]);
  1001  000AEA  5009               	movf	ESCRIBE_MENSAJE@i,w,c
  1002  000AEC  0D01               	mullw	1
  1003  000AEE  C004  F007         	movff	ESCRIBE_MENSAJE@cadena,??_ESCRIBE_MENSAJE
  1004  000AF2  C005  F008         	movff	ESCRIBE_MENSAJE@cadena+1,??_ESCRIBE_MENSAJE+1
  1005  000AF6  50F3               	movf	prodl,w,c
  1006  000AF8  2607               	addwf	??_ESCRIBE_MENSAJE,f,c
  1007  000AFA  50F4               	movf	prodh,w,c
  1008  000AFC  2208               	addwfc	??_ESCRIBE_MENSAJE+1,f,c
  1009  000AFE  C007  FFF6         	movff	??_ESCRIBE_MENSAJE,tblptrl
  1010  000B02  C008  FFF7         	movff	??_ESCRIBE_MENSAJE+1,tblptrh
  1011  000B06                     	if	0	;tblptru may be non-zero
  1012  000B06                     	endif
  1013  000B06                     	if	0	;tblptru may be non-zero
  1014  000B06                     	endif
  1015  000B06  0008               	tblrd		*
  1016  000B08  50F5               	movf	tablat,w,c
  1017  000B0A  EC8D  F005         	call	_ENVIA_CHAR
  1018  000B0E  2A09               	incf	ESCRIBE_MENSAJE@i,f,c
  1019  000B10                     l1078:
  1020  000B10  5006               	movf	ESCRIBE_MENSAJE@tam,w,c
  1021  000B12  5C09               	subwf	ESCRIBE_MENSAJE@i,w,c
  1022  000B14  B0D8               	btfsc	status,0,c
  1023  000B16  0012               	return	
  1024  000B18  D7E8               	goto	l1074
  1025  000B1A                     __end_of_ESCRIBE_MENSAJE:
  1026                           	opt stack 0
  1027                           tblptru	equ	0xFF8
  1028                           tblptrh	equ	0xFF7
  1029                           tblptrl	equ	0xFF6
  1030                           tablat	equ	0xFF5
  1031                           prodh	equ	0xFF4
  1032                           prodl	equ	0xFF3
  1033                           postinc0	equ	0xFEE
  1034                           wreg	equ	0xFE8
  1035                           status	equ	0xFD8
  1036                           
  1037 ;; *************** function _ENVIA_CHAR *****************
  1038 ;; Defined at:
  1039 ;;		line 50 in file "LCD.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;  dato            1    wreg     unsigned char 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  dato            1    1[COMRAM] unsigned char 
  1044 ;;  aux             1    2[COMRAM] unsigned char 
  1045 ;; Return value:  Size  Location     Type
  1046 ;;                  1    wreg      void 
  1047 ;; Registers used:
  1048 ;;		wreg, status,2, status,0, cstack
  1049 ;; Tracked objects:
  1050 ;;		On entry : 0/0
  1051 ;;		On exit  : 0/0
  1052 ;;		Unchanged: 0/0
  1053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1054 ;;      Params:         0       0       0       0       0       0       0       0       0
  1055 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1056 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1057 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1058 ;;Total ram usage:        2 bytes
  1059 ;; Hardware stack levels used:    1
  1060 ;; Hardware stack levels required when called:    1
  1061 ;; This function calls:
  1062 ;;		_ENVIA_NIBBLE
  1063 ;;		_LEER_LCD
  1064 ;; This function is called by:
  1065 ;;		_main
  1066 ;;		_ESCRIBE_MENSAJE
  1067 ;;		_GENERACARACTER
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text7
  1072  000B1A                     __ptext7:
  1073                           	opt stack 0
  1074  000B1A                     _ENVIA_CHAR:
  1075                           	opt stack 28
  1076                           
  1077                           ;incstack = 0
  1078                           ;ENVIA_CHAR@dato stored from wreg
  1079  000B1A  6E02               	movwf	ENVIA_CHAR@dato,c
  1080                           
  1081                           ;LCD.c: 52: unsigned char aux;
  1082                           ;LCD.c: 53: LATDbits.LATD0 = 1;
  1083  000B1C  808C               	bsf	3980,0,c	;volatile
  1084                           
  1085                           ;LCD.c: 54: LEER_LCD();
  1086  000B1E  EC0E  F005         	call	_LEER_LCD	;wreg free
  1087                           
  1088                           ;LCD.c: 55: TRISD = 0x00;
  1089  000B22  0E00               	movlw	0
  1090  000B24  6E95               	movwf	3989,c	;volatile
  1091                           
  1092                           ;LCD.c: 56: _delay(1200);
  1093  000B26  0EF0               	movlw	240
  1094  000B28                     u367:
  1095  000B28  D000               	nop2	
  1096  000B2A  2EE8               	decfsz	wreg,f,c
  1097  000B2C  D7FD               	bra	u367
  1098                           
  1099                           ;LCD.c: 58: LATDbits.LATD1 = 0;
  1100  000B2E  928C               	bcf	3980,1,c	;volatile
  1101                           
  1102                           ;LCD.c: 59: LATDbits.LATD2 = 0;
  1103  000B30  948C               	bcf	3980,2,c	;volatile
  1104                           
  1105                           ;LCD.c: 60: LATDbits.LATD0 = 1;
  1106  000B32  808C               	bsf	3980,0,c	;volatile
  1107                           
  1108                           ;LCD.c: 61: aux = dato & 0xF0;
  1109  000B34  5002               	movf	ENVIA_CHAR@dato,w,c
  1110  000B36  0BF0               	andlw	240
  1111  000B38  6E03               	movwf	ENVIA_CHAR@aux,c
  1112                           
  1113                           ;LCD.c: 62: ENVIA_NIBBLE(aux);
  1114  000B3A  5003               	movf	ENVIA_CHAR@aux,w,c
  1115  000B3C  ECF4  F005         	call	_ENVIA_NIBBLE
  1116                           
  1117                           ;LCD.c: 63: aux = dato << 4;
  1118  000B40  3802               	swapf	ENVIA_CHAR@dato,w,c
  1119  000B42  0BF0               	andlw	240
  1120  000B44  6E03               	movwf	ENVIA_CHAR@aux,c
  1121                           
  1122                           ;LCD.c: 64: ENVIA_NIBBLE(aux);
  1123  000B46  5003               	movf	ENVIA_CHAR@aux,w,c
  1124  000B48  ECF4  F005         	call	_ENVIA_NIBBLE
  1125  000B4C  0012               	return		;funcret
  1126  000B4E                     __end_of_ENVIA_CHAR:
  1127                           	opt stack 0
  1128                           tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           prodh	equ	0xFF4
  1133                           prodl	equ	0xFF3
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           status	equ	0xFD8
  1137                           
  1138 ;; *************** function _CURSOR_ONOFF *****************
  1139 ;; Defined at:
  1140 ;;		line 35 in file "LCD.c"
  1141 ;; Parameters:    Size  Location     Type
  1142 ;;  estado          1    wreg     unsigned char 
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  estado          1    3[COMRAM] unsigned char 
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		wreg, status,2, status,0, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1154 ;;      Params:         0       0       0       0       0       0       0       0       0
  1155 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1156 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1157 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1158 ;;Total ram usage:        1 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    2
  1161 ;; This function calls:
  1162 ;;		_ENVIA_LCD_CMD
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           	psect	text8
  1169  000BCC                     __ptext8:
  1170                           	opt stack 0
  1171  000BCC                     _CURSOR_ONOFF:
  1172                           	opt stack 28
  1173                           
  1174                           ;incstack = 0
  1175                           ;CURSOR_ONOFF@estado stored from wreg
  1176  000BCC  6E04               	movwf	CURSOR_ONOFF@estado,c
  1177                           
  1178                           ;LCD.c: 37: if(estado == 0) ENVIA_LCD_CMD(0x0E);
  1179  000BCE  5004               	movf	CURSOR_ONOFF@estado,w,c
  1180  000BD0  A4D8               	btfss	status,2,c
  1181  000BD2  D003               	goto	l914
  1182  000BD4  0E0E               	movlw	14
  1183  000BD6  ECA7  F005         	call	_ENVIA_LCD_CMD
  1184  000BDA                     l914:
  1185                           
  1186                           ;LCD.c: 38: if(estado == 1) ENVIA_LCD_CMD(0x0C);
  1187  000BDA  0404               	decf	CURSOR_ONOFF@estado,w,c
  1188  000BDC  A4D8               	btfss	status,2,c
  1189  000BDE  0012               	return	
  1190  000BE0  0E0C               	movlw	12
  1191  000BE2  ECA7  F005         	call	_ENVIA_LCD_CMD
  1192  000BE6  0012               	return	
  1193  000BE8                     __end_of_CURSOR_ONOFF:
  1194                           	opt stack 0
  1195                           tblptru	equ	0xFF8
  1196                           tblptrh	equ	0xFF7
  1197                           tblptrl	equ	0xFF6
  1198                           tablat	equ	0xFF5
  1199                           prodh	equ	0xFF4
  1200                           prodl	equ	0xFF3
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           status	equ	0xFD8
  1204                           
  1205 ;; *************** function _CURSOR_HOME *****************
  1206 ;; Defined at:
  1207 ;;		line 30 in file "LCD.c"
  1208 ;; Parameters:    Size  Location     Type
  1209 ;;		None
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;		None
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, status,2, status,0, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1221 ;;      Params:         0       0       0       0       0       0       0       0       0
  1222 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1224 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1225 ;;Total ram usage:        0 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    2
  1228 ;; This function calls:
  1229 ;;		_ENVIA_LCD_CMD
  1230 ;; This function is called by:
  1231 ;;		_main
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text9
  1236  000C1E                     __ptext9:
  1237                           	opt stack 0
  1238  000C1E                     _CURSOR_HOME:
  1239                           	opt stack 28
  1240                           
  1241                           ;LCD.c: 32: ENVIA_LCD_CMD(0x02);
  1242                           
  1243                           ;incstack = 0
  1244  000C1E  0E02               	movlw	2
  1245  000C20  ECA7  F005         	call	_ENVIA_LCD_CMD
  1246  000C24  0012               	return		;funcret
  1247  000C26                     __end_of_CURSOR_HOME:
  1248                           	opt stack 0
  1249                           tblptru	equ	0xFF8
  1250                           tblptrh	equ	0xFF7
  1251                           tblptrl	equ	0xFF6
  1252                           tablat	equ	0xFF5
  1253                           prodh	equ	0xFF4
  1254                           prodl	equ	0xFF3
  1255                           postinc0	equ	0xFEE
  1256                           wreg	equ	0xFE8
  1257                           status	equ	0xFD8
  1258                           
  1259 ;; *************** function _BORRAR_LCD *****************
  1260 ;; Defined at:
  1261 ;;		line 67 in file "LCD.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;		None
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;		None
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  1    wreg      void 
  1268 ;; Registers used:
  1269 ;;		wreg, status,2, status,0, cstack
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1275 ;;      Params:         0       0       0       0       0       0       0       0       0
  1276 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1278 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1279 ;;Total ram usage:        0 bytes
  1280 ;; Hardware stack levels used:    1
  1281 ;; Hardware stack levels required when called:    2
  1282 ;; This function calls:
  1283 ;;		_ENVIA_LCD_CMD
  1284 ;; This function is called by:
  1285 ;;		_main
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           	psect	text10
  1290  000C26                     __ptext10:
  1291                           	opt stack 0
  1292  000C26                     _BORRAR_LCD:
  1293                           	opt stack 28
  1294                           
  1295                           ;LCD.c: 69: ENVIA_LCD_CMD(0x01);
  1296                           
  1297                           ;incstack = 0
  1298  000C26  0E01               	movlw	1
  1299  000C28  ECA7  F005         	call	_ENVIA_LCD_CMD
  1300  000C2C  0012               	return		;funcret
  1301  000C2E                     __end_of_BORRAR_LCD:
  1302                           	opt stack 0
  1303                           tblptru	equ	0xFF8
  1304                           tblptrh	equ	0xFF7
  1305                           tblptrl	equ	0xFF6
  1306                           tablat	equ	0xFF5
  1307                           prodh	equ	0xFF4
  1308                           prodl	equ	0xFF3
  1309                           postinc0	equ	0xFEE
  1310                           wreg	equ	0xFE8
  1311                           status	equ	0xFD8
  1312                           
  1313 ;; *************** function _ENVIA_LCD_CMD *****************
  1314 ;; Defined at:
  1315 ;;		line 104 in file "LCD.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  dato            1    wreg     unsigned char 
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;  dato            1    1[COMRAM] unsigned char 
  1320 ;;  aux             1    2[COMRAM] unsigned char 
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1330 ;;      Params:         0       0       0       0       0       0       0       0       0
  1331 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1332 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1333 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1334 ;;Total ram usage:        2 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    1
  1337 ;; This function calls:
  1338 ;;		_ENVIA_NIBBLE
  1339 ;;		_LEER_LCD
  1340 ;; This function is called by:
  1341 ;;		_POS_CURSOR
  1342 ;;		_CURSOR_HOME
  1343 ;;		_CURSOR_ONOFF
  1344 ;;		_BORRAR_LCD
  1345 ;;		_LCD_CONFIG
  1346 ;;		_BLINK_CURSOR
  1347 ;;		_DISPLAY_ONOFF
  1348 ;;		_GENERACARACTER
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text11
  1353  000B4E                     __ptext11:
  1354                           	opt stack 0
  1355  000B4E                     _ENVIA_LCD_CMD:
  1356                           	opt stack 28
  1357                           
  1358                           ;incstack = 0
  1359                           ;ENVIA_LCD_CMD@dato stored from wreg
  1360  000B4E  6E02               	movwf	ENVIA_LCD_CMD@dato,c
  1361                           
  1362                           ;LCD.c: 106: unsigned char aux;
  1363                           ;LCD.c: 107: LATDbits.LATD0 = 0;
  1364  000B50  908C               	bcf	3980,0,c	;volatile
  1365                           
  1366                           ;LCD.c: 108: LEER_LCD();
  1367  000B52  EC0E  F005         	call	_LEER_LCD	;wreg free
  1368                           
  1369                           ;LCD.c: 109: TRISD = 0b00000000;
  1370  000B56  0E00               	movlw	0
  1371  000B58  6E95               	movwf	3989,c	;volatile
  1372                           
  1373                           ;LCD.c: 111: _delay(1200);
  1374  000B5A  0EF0               	movlw	240
  1375  000B5C                     u377:
  1376  000B5C  D000               	nop2	
  1377  000B5E  2EE8               	decfsz	wreg,f,c
  1378  000B60  D7FD               	bra	u377
  1379                           
  1380                           ;LCD.c: 112: LATDbits.LATD1 = 0;
  1381  000B62  928C               	bcf	3980,1,c	;volatile
  1382                           
  1383                           ;LCD.c: 113: LATDbits.LATD2 = 0;
  1384  000B64  948C               	bcf	3980,2,c	;volatile
  1385                           
  1386                           ;LCD.c: 114: LATDbits.LATD0 = 0;
  1387  000B66  908C               	bcf	3980,0,c	;volatile
  1388                           
  1389                           ;LCD.c: 115: aux = dato & 0xF0;
  1390  000B68  5002               	movf	ENVIA_LCD_CMD@dato,w,c
  1391  000B6A  0BF0               	andlw	240
  1392  000B6C  6E03               	movwf	ENVIA_LCD_CMD@aux,c
  1393                           
  1394                           ;LCD.c: 116: ENVIA_NIBBLE(aux);
  1395  000B6E  5003               	movf	ENVIA_LCD_CMD@aux,w,c
  1396  000B70  ECF4  F005         	call	_ENVIA_NIBBLE
  1397                           
  1398                           ;LCD.c: 117: aux = dato<<4;
  1399  000B74  3802               	swapf	ENVIA_LCD_CMD@dato,w,c
  1400  000B76  0BF0               	andlw	240
  1401  000B78  6E03               	movwf	ENVIA_LCD_CMD@aux,c
  1402                           
  1403                           ;LCD.c: 118: ENVIA_NIBBLE(aux);
  1404  000B7A  5003               	movf	ENVIA_LCD_CMD@aux,w,c
  1405  000B7C  ECF4  F005         	call	_ENVIA_NIBBLE
  1406  000B80  0012               	return		;funcret
  1407  000B82                     __end_of_ENVIA_LCD_CMD:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           prodh	equ	0xFF4
  1414                           prodl	equ	0xFF3
  1415                           postinc0	equ	0xFEE
  1416                           wreg	equ	0xFE8
  1417                           status	equ	0xFD8
  1418                           
  1419 ;; *************** function _LEER_LCD *****************
  1420 ;; Defined at:
  1421 ;;		line 121 in file "LCD.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;  aux             1    0[COMRAM] unsigned char 
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, status,2, status,0
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1435 ;;      Params:         0       0       0       0       0       0       0       0       0
  1436 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1438 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1439 ;;Total ram usage:        1 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; This function calls:
  1442 ;;		Nothing
  1443 ;; This function is called by:
  1444 ;;		_ENVIA_CHAR
  1445 ;;		_ENVIA_LCD_CMD
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text12
  1450  000A1C                     __ptext12:
  1451                           	opt stack 0
  1452  000A1C                     _LEER_LCD:
  1453                           	opt stack 28
  1454                           
  1455                           ;LCD.c: 123: unsigned char aux;
  1456                           ;LCD.c: 124: TRISD = 0xF8;
  1457                           
  1458                           ;incstack = 0
  1459  000A1C  0EF8               	movlw	248
  1460  000A1E  6E95               	movwf	3989,c	;volatile
  1461                           
  1462                           ;LCD.c: 125: LATDbits.LATD0 = 0;
  1463  000A20  908C               	bcf	3980,0,c	;volatile
  1464                           
  1465                           ;LCD.c: 126: LATDbits.LATD1 = 1;
  1466  000A22  828C               	bsf	3980,1,c	;volatile
  1467                           
  1468                           ;LCD.c: 127: LATDbits.LATD2 = 1;
  1469  000A24  848C               	bsf	3980,2,c	;volatile
  1470                           
  1471                           ;LCD.c: 128: _delay(1200);
  1472  000A26  0EF0               	movlw	240
  1473  000A28                     u387:
  1474  000A28  D000               	nop2	
  1475  000A2A  2EE8               	decfsz	wreg,f,c
  1476  000A2C  D7FD               	bra	u387
  1477                           
  1478                           ;LCD.c: 130: aux = PORTD;
  1479  000A2E  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1480                           
  1481                           ;LCD.c: 131: LATDbits.LATD2 = 0;
  1482  000A32  948C               	bcf	3980,2,c	;volatile
  1483                           
  1484                           ;LCD.c: 132: _delay(1200);
  1485  000A34  0EF0               	movlw	240
  1486  000A36                     u397:
  1487  000A36  D000               	nop2	
  1488  000A38  2EE8               	decfsz	wreg,f,c
  1489  000A3A  D7FD               	bra	u397
  1490                           
  1491                           ;LCD.c: 134: LATDbits.LATD2 = 1;
  1492  000A3C  848C               	bsf	3980,2,c	;volatile
  1493                           
  1494                           ;LCD.c: 135: _delay(1200);
  1495  000A3E  0EF0               	movlw	240
  1496  000A40                     u407:
  1497  000A40  D000               	nop2	
  1498  000A42  2EE8               	decfsz	wreg,f,c
  1499  000A44  D7FD               	bra	u407
  1500  000A46  D015               	goto	l776
  1501  000A48                     l766:
  1502                           
  1503                           ;LCD.c: 138: aux = aux & 0x80;
  1504  000A48  5001               	movf	LEER_LCD@aux,w,c
  1505  000A4A  0B80               	andlw	128
  1506  000A4C  6E01               	movwf	LEER_LCD@aux,c
  1507                           
  1508                           ;LCD.c: 139: while(aux == 0x80)
  1509  000A4E  D013               	goto	l780
  1510  000A50                     l123:
  1511                           
  1512                           ;LCD.c: 140: {
  1513                           ;LCD.c: 141: LATDbits.LATD2 = 1;
  1514  000A50  848C               	bsf	3980,2,c	;volatile
  1515                           
  1516                           ;LCD.c: 142: _delay(1200);
  1517  000A52  0EF0               	movlw	240
  1518  000A54                     u417:
  1519  000A54  D000               	nop2	
  1520  000A56  2EE8               	decfsz	wreg,f,c
  1521  000A58  D7FD               	bra	u417
  1522                           
  1523                           ;LCD.c: 143: aux = PORTD;
  1524  000A5A  CF83 F001          	movff	3971,LEER_LCD@aux	;volatile
  1525                           
  1526                           ;LCD.c: 144: LATDbits.LATD2 = 0;
  1527  000A5E  948C               	bcf	3980,2,c	;volatile
  1528                           
  1529                           ;LCD.c: 145: _delay(1200);
  1530  000A60  0EF0               	movlw	240
  1531  000A62                     u427:
  1532  000A62  D000               	nop2	
  1533  000A64  2EE8               	decfsz	wreg,f,c
  1534  000A66  D7FD               	bra	u427
  1535                           
  1536                           ;LCD.c: 146: LATDbits.LATD2 = 1;
  1537  000A68  848C               	bsf	3980,2,c	;volatile
  1538                           
  1539                           ;LCD.c: 147: _delay(1200);
  1540  000A6A  0EF0               	movlw	240
  1541  000A6C                     u437:
  1542  000A6C  D000               	nop2	
  1543  000A6E  2EE8               	decfsz	wreg,f,c
  1544  000A70  D7FD               	bra	u437
  1545  000A72                     l776:
  1546                           
  1547                           ;LCD.c: 148: LATDbits.LATD2 = 0;
  1548  000A72  948C               	bcf	3980,2,c	;volatile
  1549  000A74  D7E9               	goto	l766
  1550  000A76                     l780:
  1551  000A76  0E80               	movlw	128
  1552  000A78  1801               	xorwf	LEER_LCD@aux,w,c
  1553  000A7A  A4D8               	btfss	status,2,c
  1554  000A7C  0012               	return	
  1555  000A7E  D7E8               	goto	l123
  1556  000A80                     __end_of_LEER_LCD:
  1557                           	opt stack 0
  1558                           tblptru	equ	0xFF8
  1559                           tblptrh	equ	0xFF7
  1560                           tblptrl	equ	0xFF6
  1561                           tablat	equ	0xFF5
  1562                           prodh	equ	0xFF4
  1563                           prodl	equ	0xFF3
  1564                           postinc0	equ	0xFEE
  1565                           wreg	equ	0xFE8
  1566                           status	equ	0xFD8
  1567                           
  1568 ;; *************** function _ENVIA_NIBBLE *****************
  1569 ;; Defined at:
  1570 ;;		line 93 in file "LCD.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;  dato            1    wreg     unsigned char 
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;  dato            1    0[COMRAM] unsigned char 
  1575 ;; Return value:  Size  Location     Type
  1576 ;;                  1    wreg      void 
  1577 ;; Registers used:
  1578 ;;		wreg, status,2, status,0
  1579 ;; Tracked objects:
  1580 ;;		On entry : 0/0
  1581 ;;		On exit  : 0/0
  1582 ;;		Unchanged: 0/0
  1583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1584 ;;      Params:         0       0       0       0       0       0       0       0       0
  1585 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1586 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1587 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1588 ;;Total ram usage:        1 bytes
  1589 ;; Hardware stack levels used:    1
  1590 ;; This function calls:
  1591 ;;		Nothing
  1592 ;; This function is called by:
  1593 ;;		_ENVIA_CHAR
  1594 ;;		_LCD_CONFIG
  1595 ;;		_ENVIA_LCD_CMD
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           	psect	text13
  1600  000BE8                     __ptext13:
  1601                           	opt stack 0
  1602  000BE8                     _ENVIA_NIBBLE:
  1603                           	opt stack 28
  1604                           
  1605                           ;incstack = 0
  1606                           ;ENVIA_NIBBLE@dato stored from wreg
  1607  000BE8  6E01               	movwf	ENVIA_NIBBLE@dato,c
  1608                           
  1609                           ;LCD.c: 95: LATD &= 0x0F;
  1610  000BEA  0E0F               	movlw	15
  1611  000BEC  168C               	andwf	3980,f,c	;volatile
  1612                           
  1613                           ;LCD.c: 96: dato &= 0xF0;
  1614  000BEE  0EF0               	movlw	240
  1615  000BF0  1601               	andwf	ENVIA_NIBBLE@dato,f,c
  1616                           
  1617                           ;LCD.c: 97: LATD|= dato;
  1618  000BF2  5001               	movf	ENVIA_NIBBLE@dato,w,c
  1619  000BF4  128C               	iorwf	3980,f,c	;volatile
  1620                           
  1621                           ;LCD.c: 98: LATDbits.LATD2 = 1;
  1622  000BF6  848C               	bsf	3980,2,c	;volatile
  1623                           
  1624                           ;LCD.c: 100: _delay(1200);
  1625  000BF8  0EF0               	movlw	240
  1626  000BFA                     u447:
  1627  000BFA  D000               	nop2	
  1628  000BFC  2EE8               	decfsz	wreg,f,c
  1629  000BFE  D7FD               	bra	u447
  1630                           
  1631                           ;LCD.c: 101: LATDbits.LATD2 = 0;
  1632  000C00  948C               	bcf	3980,2,c	;volatile
  1633  000C02  0012               	return		;funcret
  1634  000C04                     __end_of_ENVIA_NIBBLE:
  1635                           	opt stack 0
  1636                           tblptru	equ	0xFF8
  1637                           tblptrh	equ	0xFF7
  1638                           tblptrl	equ	0xFF6
  1639                           tablat	equ	0xFF5
  1640                           prodh	equ	0xFF4
  1641                           prodl	equ	0xFF3
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           status	equ	0xFD8
  1645                           tblptru	equ	0xFF8
  1646                           tblptrh	equ	0xFF7
  1647                           tblptrl	equ	0xFF6
  1648                           tablat	equ	0xFF5
  1649                           prodh	equ	0xFF4
  1650                           prodl	equ	0xFF3
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           status	equ	0xFD8
  1654                           
  1655                           	psect	rparam
  1656  0000                     tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           prodh	equ	0xFF4
  1661                           prodl	equ	0xFF3
  1662                           postinc0	equ	0xFEE
  1663                           wreg	equ	0xFE8
  1664                           status	equ	0xFD8


Data Sizes:
    Strings     22
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      21
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ESCRIBE_MENSAJE@cadena	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[8]), STR_1(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_ESCRIBE_MENSAJE
    _conviertemon->___awdiv
    _POS_CURSOR->_ENVIA_LCD_CMD
    _LCD_CONFIG->_ENVIA_LCD_CMD
    _ESCRIBE_MENSAJE->_ENVIA_CHAR
    _ENVIA_CHAR->_ENVIA_NIBBLE
    _ENVIA_CHAR->_LEER_LCD
    _CURSOR_ONOFF->_ENVIA_LCD_CMD
    _CURSOR_HOME->_ENVIA_LCD_CMD
    _BORRAR_LCD->_ENVIA_LCD_CMD
    _ENVIA_LCD_CMD->_ENVIA_NIBBLE
    _ENVIA_LCD_CMD->_LEER_LCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3231
                                              9 COMRAM     2     2      0
                         _BORRAR_LCD
                        _CURSOR_HOME
                       _CURSOR_ONOFF
                         _ENVIA_CHAR
                    _ESCRIBE_MENSAJE
                         _LCD_CONFIG
                         _POS_CURSOR
                            ___awdiv
                       _conviertemon
 ---------------------------------------------------------------------------------
 (1) _conviertemon                                         0     0      0    1099
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     684
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _POS_CURSOR                                           2     1      1     336
                                              3 COMRAM     2     1      1
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_CONFIG                                           1     1      0     135
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
                       _ENVIA_NIBBLE
 ---------------------------------------------------------------------------------
 (1) _ESCRIBE_MENSAJE                                      6     3      3     467
                                              3 COMRAM     6     3      3
                         _ENVIA_CHAR
 ---------------------------------------------------------------------------------
 (2) _ENVIA_CHAR                                           2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_ONOFF                                         1     1      0     150
                                              3 COMRAM     1     1      0
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _CURSOR_HOME                                          0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _BORRAR_LCD                                           0     0      0     120
                      _ENVIA_LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _ENVIA_LCD_CMD                                        2     2      0     120
                                              1 COMRAM     2     2      0
                       _ENVIA_NIBBLE
                           _LEER_LCD
 ---------------------------------------------------------------------------------
 (3) _LEER_LCD                                             1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ENVIA_NIBBLE                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BORRAR_LCD
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_HOME
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _CURSOR_ONOFF
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   _ENVIA_CHAR
     _ENVIA_NIBBLE
     _LEER_LCD
   _ESCRIBE_MENSAJE
     _ENVIA_CHAR
       _ENVIA_NIBBLE
       _LEER_LCD
   _LCD_CONFIG
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
     _ENVIA_NIBBLE
   _POS_CURSOR
     _ENVIA_LCD_CMD
       _ENVIA_NIBBLE
       _LEER_LCD
   ___awdiv
   _conviertemon
     ___awdiv
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      B      15       1       22.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      15      20        0.0%
DATA                 0      0      15       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Feb 13 16:26:32 2018

            ___awdiv@sign 0006       ___wmul@multiplicand 0003             ENVIA_CHAR@aux 0003  
                     l123 0A50                       l914 0BDA                       l780 0A76  
                     l766 0A48                       l776 0A72                       u307 083C  
                     u317 08E4                       u407 0A40                       u327 08FE  
                     u417 0A54                       u337 0A90                       u427 0A62  
                     u347 0A9E                       u437 0A6C                       u357 0AAE  
                     u447 0BFA                       u367 0B28                       u377 0B5C  
                     u387 0A28                       u397 0A36              __CFG_BOR$OFF 000000  
             LEER_LCD@aux 0001                       wreg 000FE8              ?_CURSOR_HOME 0001  
          ??_ENVIA_NIBBLE 0001              __CFG_LVP$OFF 000000            ENVIA_CHAR@dato 0002  
            __CFG_WDT$OFF 000000                      l1050 09DA                      l1042 09BC  
                    l1114 087E                      l1060 09FA                      l1052 09DE  
                    l1036 09AC                      l1118 088A                      l1048 09D2  
                    l1064 0A04                      l1074 0AEA                      l1084 0BBA  
                    l1068 0A12                      l1078 0B10                      STR_1 0801  
                    STR_2 080F                      _LATD 000F8C              __CFG_PWRT$ON 000000  
                    _main 0818                      prodh 000FF4                      prodl 000FF3  
                    start 0000             ?_CURSOR_ONOFF 0001             __CFG_MCLRE$ON 000000  
            ___param_bank 000000           ??_ENVIA_LCD_CMD 0002             ?_conviertemon 0001  
        __end_of_LEER_LCD 0A80       __size_of_BORRAR_LCD 0008                     ?_main 0001  
         __end_of___awdiv 0A1C           ___awdiv@divisor 0003           ___awdiv@counter 0005  
                   _PORTD 000F83       __size_of_LCD_CONFIG 0060                     _TRISD 000F95  
     __size_of_ENVIA_CHAR 0034               ?_POS_CURSOR 0004                     tablat 000FF5  
                   status 000FD8            ??_CURSOR_ONOFF 0004            __CFG_PBADEN$ON 000000  
         __initialization 0C04            ??_conviertemon 0009              __end_of_main 090E  
         _ESCRIBE_MENSAJE 0AE0                    ??_main 000A             __activetblptr 000001  
         __CFG_CCP2MX$OFF 000000                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0                    _ADRESH 000FC4          ___awdiv@dividend 0001  
                  _CVRCON 000FB5                    ___wmul 0B82                 ??___awdiv 0005  
    __end_of_ENVIA_NIBBLE 0C04                    _digdec 0012                    _digcen 0010  
                  _diguni 0014       __size_of_POS_CURSOR 0024                    clear_0 0C0A  
        ___awdiv@quotient 0007                    _resadc 000C              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
            ??_BORRAR_LCD 0004      __size_of_CURSOR_HOME 0008                 ?_LEER_LCD 0001  
              __accesstop 0060   __end_of__initialization 0C10              ??_LCD_CONFIG 0004  
           ___rparam_used 000001              ??_ENVIA_CHAR 0002   __end_of_ESCRIBE_MENSAJE 0B1A  
          __pcstackCOMRAM 0001        __end_of_BORRAR_LCD 0C2E          ENVIA_LCD_CMD@aux 0003  
    __end_of_CURSOR_ONOFF 0BE8        __end_of_LCD_CONFIG 0AE0        __end_of_ENVIA_CHAR 0B4E  
    __end_of_conviertemon 0998                ??_LEER_LCD 0001          ENVIA_NIBBLE@dato 0001  
                 ?___wmul 0001              ??_POS_CURSOR 0005     __size_of_ENVIA_NIBBLE 001C  
                 __Hparam 0000                   __Lparam 0000          ?_ESCRIBE_MENSAJE 0004  
                 ___awdiv 0998           __size_of___wmul 0026              __psmallconst 0800  
   __end_of_ENVIA_LCD_CMD 0B82                   __pcinit 0C04        __end_of_POS_CURSOR 0BCC  
                 __ramtop 0800                   __ptext0 0818                   __ptext1 090E  
                 __ptext2 0B82                   __ptext3 0998                   __ptext4 0BA8  
                 __ptext5 0A80                   __ptext6 0AE0                   __ptext7 0B1A  
                 __ptext8 0BCC                   __ptext9 0C1E              _ENVIA_NIBBLE 0BE8  
    end_of_initialization 0C10                   postinc0 000FEE     __size_of_CURSOR_ONOFF 001C  
   __size_of_conviertemon 008A         __size_of_LEER_LCD 0064              _CURSOR_ONOFF 0BCC  
      CURSOR_ONOFF@estado 0004              _conviertemon 090E            __end_of___wmul 0BA8  
           ??_CURSOR_HOME 0004       start_initialization 0C04         ENVIA_LCD_CMD@dato 0002  
                ??___wmul 0005               __pbssCOMRAM 000C       __end_of_CURSOR_HOME 0C26  
                ?___awdiv 0001               __smallconst 0800                  _LEER_LCD 0A1C  
          ___wmul@product 0005                  _LATDbits 000F8C          ESCRIBE_MENSAJE@i 0009  
          POS_CURSOR@fila 0005  __size_of_ESCRIBE_MENSAJE 003A                _ADCON0bits 000FC2  
       ___wmul@multiplier 0001               _CURSOR_HOME 0C1E    __size_of_ENVIA_LCD_CMD 0034  
                __Hrparam 0000                  __Lrparam 0000              __Lsmallconst 0800  
        __size_of___awdiv 0084     __CFG_FOSC$INTOSCIO_EC 000000                  __ptext10 0C26  
                __ptext11 0B4E                  __ptext12 0A1C                  __ptext13 0BE8  
              _BORRAR_LCD 0C26             __size_of_main 00F6                _LCD_CONFIG 0A80  
              _ENVIA_CHAR 0B1A                  _temporal 000E             _ENVIA_LCD_CMD 0B4E  
       ??_ESCRIBE_MENSAJE 0007     ESCRIBE_MENSAJE@cadena 0004                _OSCCONbits 000FD3  
          ?_ENVIA_LCD_CMD 0001               ?_BORRAR_LCD 0001             ?_ENVIA_NIBBLE 0001  
              _POS_CURSOR 0BA8               ?_LCD_CONFIG 0001        ESCRIBE_MENSAJE@tam 0006  
             ?_ENVIA_CHAR 0001         POS_CURSOR@columna 0004  
