;Este es el primer programa del curso: negador 1-bit
;Pin RB7 = Entrada del negador
;Pin RB0 = Salida del negador
;Desarrollador: Kalun Lau
;Changelog: 07/08/2015 -Codificación inicial, simula correctamente en Proteus ISIS
;			                  pero no funciona en la implementación, revisando los
;                 			bits de configuración del uC pero sin resultado.
;                 	    08/08/2015 -Se logró implementar el diseño en el uC mediante bootloader
;                 			se detectó un error en la codificación, me olvidé de colocar org 5
;                 			para indicarle al compilador que grabe el programa mas abajo del org 0
;                 			lugar donde estan las instrucciones del bootloader    

    ;Para indicarle al ensamblador el uC que se va a usar
    list p=16f88

    ;Llamar a la librería de nombres de los registros
    #include <p16f88.inc>

    ;Configuración inicial del uC
    ;Se debe de comentar las palabras de configuración si es que se esta usando bootloader
    ;__CONFIG _CONFIG1, _INTRC_IO & _CP_OFF & _CCP1_RB0 & _DEBUG_OFF & _WRT_PROTECT_OFF & _CPD_OFF & _LVP_OFF & _BODEN_OFF & _MCLR_ON & _PWRTE_ON & _WDT_OFF
    ;__CONFIG _CONFIG2, _IESO_OFF & _FCMEN_OFF
    
    ;Área de programa después del RESET
    org 0

    ;clrf STATUS
    clrf PCLATH
    goto confi
    
    org 5

confi:	movlw 0x20	;Cargamos a W el valor de 20H
      	movwf STATUS	;Movemos el contenido de W a STATUS
	      clrf ANSEL	;Deshabilitamos el ADC
	      movlw 0xFE
	      movwf TRISB	;Puerto B0 como salida
	      movlw 0x07
        movwf CMCON	;Desactivamos el comparador analógico
        clrf CVRCON	;Desactivamos el voltaje de referencia
      	clrf STATUS	;Limpiamos el contenido de STATUS

inicio:	btfss PORTB, 7	;Preguntamos el RB7 si esta en 1
	      goto falso	;Salta aquí si no es cierto
	      bcf PORTB, 0	;Salta aquí si es cierto, mandamos a 0 el RB0
	      goto inicio	;Salta a inicio
falso:	bsf PORTB, 0	;Mandamos a 1 el RB0
      	goto inicio	;Salta a inicio
      	end
